计算机操作系统笔记

当相互合作的进程(线程)处于同一计算机系统时，通常在它们之间是采用直接通信方
式，即由源进程利用发送命令直接将消息(Message)挂到目标进程的消息队列上，以后由目
标进程利用接收命令从其消息队列中取出消息。


CPU 运行的高速性和I/O 低速性间的矛盾自计算机诞生时起便已存在了。

系统吞吐量是指系统在单位时间内所完成的总工作量

分层结构的主要缺点是：系统效率降低了。由于层次结构是分层单向依赖的，因此必
须在相邻层之间都要建立层次间的通信机制，OS每执行一个功能，通常要自上而下地穿越
多个层次，这无疑会增加系统的通信开销，从而导致系统效率的降低。

在未配置OS的系统中，程序的执行方式是顺序执行，即必须在一个程序执行完后，才
允许另一个程序执行；在多道程序环境下，则允许多个程序并发执行。程序的这两种执行
方式间有着显著的不同。也正是程序并发执行时的这种特征，才导致了在操作系统中引入
进程的概念。

通常的程序是不能并发执行的。为使程序(含数据)能独立运行，应为之配置一进程控制
块，即PCB(Process Control Block)；而由程序段、相关的数据段和PCB三部分便构成了进
程实体
OS是根据PCB来对并发执行的进程进行控制和管理的。例如，当OS要调度某进程执行时，要从该进程的PCB
中查出其现行状态及优先级；在调度到某进程后，要根据其PCB 中所保存的处理机状态信
息，设置该进程恢复运行的现场，并根据其PCB 中的程序和数据的内存始址，找到其程序
和数据；

进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位

运行中的进程可能具有以下三种基本状态。
1) 就绪(Ready)状态
当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行，进
程这时的状态称为就绪状态。在一个系统中处于就绪状态的进程可能有多个，通常将它们
排成一个队列，称为就绪队列。
2) 执行状态
进程已获得CPU，其程序正在执行。在单处理机系统中，只有一个进程处于执行状态；
在多处理机系统中，则有多个进程处于执行状态。
3) 阻塞状态
正在执行的进程由于发生某事件而暂时无法继续执行时，便放弃处理机而处于暂停状态，
亦即进程的执行受到阻塞，把这种暂停状态称为阻塞状态，有时也称为等待状态或封锁状态。
致使进程阻塞的典型事件有：请求I/O，申请缓冲空间等。通常将这种处于阻塞状态的进程也
排成一个队列

子进程可以继承父进程所拥有的资源，例
如，继承父进程打开的文件，继承父进程所分配到的缓冲区等。当子进程被撤消时，应将
其从父进程那里获得的资源归还给父进程。


高级通信机制可归结为三大类：
共享存储器系统、消息传递系统以及管道通信系统。

1．共享存储器系统
公用数据结构的设置及对进程间同步的处理，都是程序员的职
责。这无疑增加了程序员的负担，而操作系统却只须提供共享存储器。因此，这种通信方
式是低效的，只适于传递相对少量的数据。

2．消息传递系统
消息传递系统(Message passing system)是当前应用最为广泛的一种进程间的通信机制。
在该机制中，进程间的数据交换是以格式化的消息(message)为单位的；在计算机网络中，
又把message称为报文。程序员直接利用操作系统提供的一组通信命令(原语)，不仅能实现
大量数据的传递，而且还隐藏了通信的实现细节，使通信过程对用户是透明的，从而大大
减化了通信程序编制的复杂性，因而获得了广泛的应用。

3．管道通信
所谓“管道”，是指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享
文件，又名pipe文件。向管道(共享文件)提供输入的发送进程(即写进程)，以字符流形式将
大量的数据送入管道；而接受管道输出的接收进程(即读进程)，则从管道中接收(读)数据。
由于发送进程和接收进程是利用管道进行通信的，故又称为管道通信。这种方式首创于
UNIX 系统，由于它能有效地传送大量数据，因而又被引入到许多其它的操作系统中。

换言之，由于进程是一个资源的拥有者，因而在创建、撤消和切换中，系统必须为之
付出较大的时空开销。正因如此，在系统中所设置的进程，其数目不宜过多，进程切换的
频率也不宜过高，这也就限制了并发程度的进一步提高。

一般而言，线程自己不拥有系统资源(也有一点必不可少的资
源)，但它可以访问其隶属进程的资源，即一个进程的代码段、数据段及所拥有的系统资源，
如已打开的文件、I/O 设备等，可以供该进程中的所有线程所共享。

在大多数的OS中，线程被中止后并不立即释放它所占有的资源，只有当进程
中的其它线程执行了分离函数后，被终止的线程才与资源分离，此时的资源才能被其它线
程利用。
虽已被终止但尚未释放资源的线程，仍可以被需要它的线程所调用，以使被终止线程
重新恢复运行。


由于网络使用的是bit 为单位，因此网络常使用的单位为Mbps 是Mbits per second，亦即是每秒多少Mbit。举例来说，大家常听到的20M/5M 光世代传输速度，如果转成文件容量的byte 时，其实理论最大传输值为：每秒2.5Mbyte/ 每秒625Kbyte的下载/上传速度

一般硬盘制造商会使用十进制的单位，所以500GByte代表为500*1000*1000*1000Byte之意。转成文件的容量单位时使用二进制(1024为底)，所以就成为466GB左右的容量了。


字组大小依据CPU的设计而有32位与64位。我们现在所称的计算机是32或64位主要是依据这个CPU解析的字组大小而来的！早期的32位CPU中，因为CPU每次能够解析的数据量有限，因此由主存储器传来的数据量就有所限制了。这也导致32位的CPU最多只能支持最大到4GBytes的内存

还记得你的计算机在开机的时候可以按下[Del]按键来进入一个名为BIOS的画面吧？BIOS(Basic Input Output System)是一套程序，这套程序是写死到主板上面的一个内存芯片中，这个内存芯片在没有通电时也能够将数据记录下来，那就是只读存储器(Read Only Memory, ROM)。ROM是一种非挥发性的内存。另外，BIOS对于个人计算机来说是非常重要的，因为他是系统在开机的时候首先会去读取的一个小程序


例题：假设你的桌面使用1024x768分辨率，且使用全彩(每个像素占用3bytes的容量)，请问你的显示适配器至少需要多少内存才能使用这样的彩度？

答：因为1024x768分辨率中会有786432个像素，每个像素占用3bytes，所以总共需要2.25MBytes以上才行！但如果考虑屏幕的更新率(每秒钟屏幕的更新次数)，显示适配器的内存还是越大越好！

透过的数据算法的关系，当传输10 位编码时，仅有8 位为数据，其余2 位为检验之用。因此带宽的计算上面，使用的换算(bit 转byte) 为1:10 而不是1byte=8bits


1.机器语言        0101的二进制语言
优点：计算机硬件可以直接识别执行，执行速度快
缺点：  很难开发，开发效率低

2.汇编语言        用英文标签取代二进制指令，本质还是在直接操作硬件
优点：比机器语言开发效率高点（但是对现在的人程序员而言开发的难度还是很大）
缺点：执行速度没机器语言快

3.高级语言        就是直接人能理解的语言语法风格来编写程序，程序员无需要在去考虑复杂的硬件操作
需要把程序编程成二级制指令，计算机才执行程序
按照编译的方式的不同，高级语又分为两大类：
1.编译型：程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，
以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件）
前期需要写好大量的代码，在通过编制后执行
优点：执行效率比解释型快
缺点：开发效率不如解释型
2.解释型：解释性语言的程序不需要编译
解释性语言在运行程序的时候才翻译二级制指令 
专门有一个解释器能够直接执行程序，每个语句都是执行的时候才翻译。
这样解释性语言每执行一次就要翻译一次，执行效率比较低
主要用于测试语法是否报错
这样就可以有利于加快开发效率
优点：开发效率比编译型高
缺点：执行效率比编译型慢

Unix是以较高阶的C语言写的，相对于汇编语言需要与硬件有密切的配合，高阶的C语言与硬件的相关性就没有这么大了
