客户端 -> 连接/线程处理 -> 解析器 -> 优化器/查询缓存 -> 存储引擎
大多数MySQL的核心服务都在第二层，包括查询解析、分析、优化、缓存以及所有的内置函数，所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。
第三层包含了存储引擎。存储引擎负责mysql中数据的存储和提取。每个存储引擎都有它的优势和劣势。服务器通过API与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。存储引擎API包含几十个底层函数，用于执行诸如“开启一个事务”或者“根据主键提取一行记录”等操作，但存储引擎不会去解析SQL，不同存储引擎之间也不会相互通信，而只是简单地响应上层服务器的请求
每个客户端连接都会在服务器进程中拥有一个线程，这个连接的查询只会在这个单独的线程中执行，该线程只能轮流在某个CPU核心或者CPU中运行。服务器会负责缓存线程，因此不需要为每一个新建的连接创建或者销毁线程，当客户端应用连接到MySQL服务器时，服务器需要对其进行认证。一旦客户端连接成功，服务器会继续验证该客户端是否具有执行某个特定查询的权限
MySQL会解析查询，并创建内部数据结构（解析树），然后对其进行各种优化，包括重写查询、决定表的读取顺序，以及选择合适的索引等，用户可以通过特殊的关键字提示(hint)优化器，影响它的决策过程。也可以请求优化器解释（explain）优化过程的各个因素，使用户可以知道服务器是如何进行优化决策的，并提供一个参考基准，便于用户重构查询和schema、修改相关配置，使应用尽可能高效运行。
优化器并不关心表使用的是什么存储引擎，但存储引擎对于优化查询是有影响的。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。对于SELECT语句，在解析查询之前，服务器会先检查查询缓存，如果能够在其中找到对应的查询，服务器就不必再执行查询解析、优化和执行的整个过程，而是直接返回查询缓存中的结果集
尽管存储引擎可以管理自己的锁，MySQL本身还是会使用各种有效的表锁来实现不同的目的。例如，服务器会为诸如ALTER TABLE之类的语句使用表锁，而忽略存储引擎的锁机制，表锁是mysql开销最小的锁，在特定的场景中，表锁也可能有良好的性能。
行级锁可以最大程序地支持并发处理，同时也带来了最大的锁开销，行级锁只在存储引擎层实现，而MySQL服务器层没有实现，服务器层完全不了解存储引擎中的锁实现
RC读已提交：一个事务开始时，只能看见已经提交的事务所做的修改，即一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的，这个级别有时候也叫做不可重复读
RR可重复读：无法解决幻读问题，幻读是指当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入新的记录，当之前的事务再次读取该范围内的记录时，会产生幻行，InnoDB通过MVCC解决了幻读的问题
死锁
事务1 START TRANSACTION;  update t set a=1 where b=1; update t set a=2 where b=2; COMMIT;
事务2 START TRANSACTION;  update t set a=2 where b=2; update t set a=1 where b=1; COMMIT;
为了解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制。越复杂的系统，比如InnoDB存储引擎，越能检测到死锁的循环依赖，并立即返回一个错误。InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚
锁的行为和顺序是和存储引擎相关的。以同样的顺序执行语句，有些存储引擎会产生死锁，有些则不会。死锁的产生有双重原因：有些是因为真正的数据冲突，这种情况通常很难避免，但有些则完全是由于存储引擎的实现方式导致的。死锁发生以后，只有部分或者完全回滚其中一个事务，才能打破死锁。对于事务型的系统，这是无法避免的，所以应用程序在设计时必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可
事务日志redo log
使用事务日志，存储引擎在修改表数据的时候只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志文件中，而不是每次都将修改的数据本身持久到磁盘。事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序IO，而不是随机IO需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久化以后，内存中被修改的数据在后台可以慢慢地刷回磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志，修改数据需要写两次磁盘。
如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。具体的恢复方式则视存储引擎而定。
MySQL默认采用自动提交模式，也就是说，如果不是显式地开始一个事务，则每个查询都被当作一个事务执行提交操作。在当前连接中，可以通过设置AUTOCOMMIT变量来启用或者禁用自动提交模式，另外还有一些命令，在执行之前会强制执行COMMIT提交当前的活动事务。比如DDL中的ALTER TABLE
MySQL服务器层不管理事务，事务是由下层的存储引擎实现的。所以在同一个事务中，使用多种存储引擎是不可靠的。如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态
隐式和显式锁定
InnoDB采用的是两阶段锁定协议。在事务执行过程中，随时都可以执行锁定，锁只有在执行COMMIT或者ROLLBACK的时候才会释放，并且所有的锁是在同一时刻被释放。前面描述的锁定都是隐式锁定，InnoDB会根据隔离级别在需要的时候自动加锁。另外，InnoDB也支持通过特定的语句进行显式锁定，这些语句不属于SQL规范：
SELECT ... LOCK IN SHARE MODE
SELECT ... FOR UPDATE
mysql也支持LOCK TABLES和UNLOCK TABLES，这是在服务器层实现的，和存储引擎无关。LOCK TABLES和事务同时使用相互影响的话，情况会变变得非常复杂，尽量不要这样使用
mysql的大多数事务型存储引擎实现的都不是简单的行级锁，基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制MVCC，InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的，这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。存储的并不是实际的时间值，而是系统版本号。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较，在RR级别下
SELECT：1.InnoDB只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或修改过的。2.行的删除版本要么未定义，要么大于当前事务版本号，这可以确保事务读取到的行，在事务开始之前未被删除
INSERT：InnoDB为新插入的每一行保存当前系统版本号作为行版本号
DELETE：InnoDB为删除的每一行保存当前系统版本号作为行删除标识
UPDATE：InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识
MVCC只在RR和RC两个隔离级别下工作
吞吐量指的是单位时间内的事务处理数，这一直是经典的数据库应用测试指标，常用的测试单位是每秒事务数（TPS）
RT：通常可以使用百分比响应时间来代替最大响应时间，例如，95%的请求响应时间都是5ms
字段值尽量避免null，除非真的需要存储NULL值。如果查询中包含可为NULL的列，对mysql来说更难优化，因为可为NULL的列使得索引、索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在MYSQL里也需要特殊处理。当可为NULL的列被索引时，每个索引记录需要一个额外的字节。通常把可为NULL的列改为NOT NULL带来的性能提升比较小，所以没有必要首先在现有schema中查找并修改掉这种情况，但是，如果计划在列上建索引，就应该尽量避免设计成为可NULL的列
MySQL可以为整数类型指定宽度，例如INT(11)，但这对大多数应用是没有意义的，只是限制了用来显示字符的个数，对于存储和计算没有影响
因为需要额外的空间和计算开销，所以应该尽量只在小数进行精确计算时才使用DECIMAL，例如存储财务数据。但在数据量比较大的时候，可以考虑使用BIGINT代替DECIMAL，将需要存储的货币单位根据小数的位数乘以相应的倍数即可
VARCHAR 比定长类型更节省空间，因为它仅使用必要的空间。有一种情况例外，如果设置ROW_FORMAT=FIXED创建的话，每一行都会使用定长存储，VARCHAR需要使用1或2个额外字节记录字符串的长度，在5.0或者更高版本，mysql在存储和检索时会保留末尾空格，但在之前的版本则会剔除
CHAR 是定长的，mysql会删除所有的末尾空格，这是在MySQL服务器层进行处理的，和存储引擎没有关系，CHAR字段不需要额外的字节存储
慷慨不是明智的
使用VARCHAR(5)和VARCHAR(200)存储'hello'的空间开销是一样的。那么使用更短的列有什么优势吗？
事实证明有很大的优势。虽然他们的磁盘占用空间是一样的，但更长的列会消耗更多的内存，因为mysql通常会分配固定大小的内存块来保存内部值。尤其是使用内存临时表进行排序或操作时会特别槽糕。在利用磁盘临时表进行排序时也同样糟糕。所以最好的策略是只分配真正需要的空间
BLOB和TEXT都是为存储很大的数据而设计的字符串数据类型，分别采用二进制和字符方式存储。当BLOB和TEXT值太大时，InnoDB会使用专门的外部存储区域来进行存储，此时每个值在行内需要1~4个字节存储一个指针，然后在外部存储区域存储实际的值
DateTime
　　a. 8个字节储存(8 bytes storage)
　　b. 实际格式储存(Just stores what you have stored and retrieves the same thing which you have stored.)
　　c. 与时区无关(It has nothing to deal with the TIMEZONE and Conversion.)
        d. 存储的时间范围为：'1000-01-01 00:00:00.000000' 到 '9999-12-31 23:59:59.999999'
Timestamp
　　a. 4个字节储存(Time stamp value is stored in 4 bytes)
　　b. 值以UTC格式保存( it stores the number of milliseconds)
　　c. 时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区。
        d. 存储的时间范围为：'1970-01-01 00:00:01.000000' 到 '2038-01-19 03:14:07.999999'
MySQL5.7版本可以用如下格式存储毫秒数，老版本不支持
TIMESTAMP(3)与 DATETIME(3)意思是保留3为毫秒数
TIMESTAMP(6)与 DATETIME(6)意思是保留6为毫秒数
对于完全随机的字符串也需要多加注意，例如MD5.SHA1或UUID产生的字符串，这些函数生成的新值会任意分布在很大的空间内，这会导致INSERT以及一些SELECT语句变得很慢，如果存储UUID值，则应该移除“-”符号
范式化：数据按不同维度存放在不同的表中，需要关联查询
反范式化：所有的数据都在一张表中，不需要关联查询
如果不需要关联表，则对大部分查询最差的情况，即使没有使用索引，是全表扫描，当数据比内存大时这可能比关联要快得多，因为这样避免了随机IO。
全表扫描基本上是顺序IO，但也不是100%，跟引擎的实现有关
ALTER TABLE
mysql的ALTER TABLE操作的性能对大表来说是个大问题，mysql执行大部分修改表结构操作的方法是用新的结构创建一个空表，从旧表中查出所有数据插入新表，然后删除旧表，这样操作可能需要花费很长时间，如果内存不足而表又很大，而且还有很多索引的情况下尤其如此。许多人都有这样的经验，ALTER TABLE操作需要花费数个小时甚至数天才能完成
对常见的场景，能使用的技巧只有两种：一种是先在一台不提供服务的机器上执行ALTER TABLE操作，然后和提供服务的主库进行切换，另外一种技巧是影子拷贝，影子拷贝是用要求的表结构创建一张和源表无关的新表，然后通过重命名和删表操作交换两张表
不是所有的ALTER TABLE操作都会引起表重建，例如修改列的默认值ALTER TABLE t ALTER COLUMN c SET DEFAULT 5;   这个语句只修改frm文件是很快的
哈希索引的限制：
哈希索引只包含哈希值和行指针，而不存储字段值；哈希索引无法用于排序；哈希索引不支持部分匹配查询和比较查询，只支持等值查询
InnoDB引擎有一个特殊的功能叫做自适应哈希索引，当InnoDB注意到某些索引值被使用得非常频繁时，它会在内存中基于B+Tree索引之上再创建一个哈希索引
B+Tree索引，按照顺序存储数据，所以MYSQL可以用来做ORDER BY和GROUP BY操作。
前缀索引是一种能使索引更小、更快的有效办法，但另一方面也有其缺点：mysql无法使用前缀索引做ORDER BY和GROUP BY，也无法使用前缀索引做覆盖扫描
三星索引：索引将相关的记录放到一起则获得一星，如果索引中的数据顺序和查找中的排列顺序一致则获得二星，如果索引中列包含了查询中需要的全部列则获得三星
当出现服务器对多个索引做相交操作时，通常有多个AND条件，通常意味着需要一个包含所有相关列的多列索引，而不是多个独立的单列索引
InnoDB的聚簇索引实际上在同一个结构中保存了B+Tree索引和数据行，术语“聚簇”表示数据行和相邻的键值紧凑地存储在一起。因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。
InnoDB默认通过主键聚集数据，如果没有定义主键，InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。InnoDB只聚集在同一个页面中的记录。包含相邻键值得页面可能会相距甚远
聚集的数据有一些重要的优点：
可以把相关数据保存在一起，数据访问更快，聚簇索引将索引和数据保存在同一个B-Tree中，因此从聚簇索引中获取数据通常比在非聚簇索引中查找要快，使用覆盖索引扫描的查询可以直接使用页节点中的主键值
同时也有缺点：
插入速度严重依赖于插入顺序，按照主键的顺序插入是加载数据到InnoDB表中速度最快的方式，更新聚簇索引列的代价很高，因为会强制InnoDB将每个被更新的行移动到新的位置。基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临页分裂的问题，当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，页分裂会导致表占用更多的磁盘空间，聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候
如果正在使用InnoDB并且没有什么数据需要聚集，那么可以定义一个代理键作为主键，这种主键的数据应该和应用无关，最简单的方法是使用AUTO_INCREMENT自增列，这样可以保证数据行是按顺序写入，对于根据主键做关联操作的性能也会更好
最好避免随机的聚簇索引，例如，从性能的角度考虑，使用UUID来作为聚簇索引则会很糟糕，它使得聚簇索引的插入变得完全随机
对于高并发工作负载，在InnoDB中按主键顺序插入可能会造成明显的争用，导致间隙锁竞争，另外一个热点可能是AUTO_INCREMENT锁机制
mysql可以使用索引来直接获取列的数据，这样就不再需要读取数据行。如果索引的叶子节点中已经包含要查询的数据，那么还有什么必要再回表查询呢？如果一个索引包含或者说覆盖所有需要查询的字段的值，我们就称之为覆盖索引。覆盖索引是非常有用的工具，能够极大地提高性能。
当发起一个被索引覆盖的查询时，在EXPLAIN的Extra列可以看到Using index的信息（很容易把extra列的using index和type列的index搞混淆，其实这两者完全不同，type是mysql查找行的方式，mysql手册中称之为连接方式）
ICP（索引条件下推）
索引条件下推的意思就是筛选字段在索引中的where条件从server层下推到storage engine层，这样可以在存储引擎层过滤数据。由此可见，ICP可以减少存储引擎访问基表的次数和mysql server访问存储引擎的次数。
用explain查看执行计划时，如果执行计划中的Extra信息为“using index condition”，表示优化器使用的index condition pushdown。
在mysql5.6以前，还没有采用ICP这种查询优化，where查询条件中的索引条件在某些情况下没有充分利用索引过滤数据。假设一个组合索引（多列索引）K包含（c1,c2,…,cn）n个列，如果在c1上存在范围扫描的where条件，那么剩余的c2,…,cn这n-1个上索引都无法用来提取和过滤数据（不管不管是唯一查找还是范围查找），索引记录没有被充分利用。即组合索引前面字段上存在范围查询，那么后面的部分的索引将不能被使用，因为后面部分的索引数据是无序。比如，索引key（a，b）中的元组数据为(0,100)、(1,50)、（1，100） ，where查询条件为 a < 2 and b = 100。由于b上得索引数据并不是连续区间，因为在读取（1，50）之后不再会读取（1，100），mysql优化器在执行索引区间扫描之后也不再扫描组合索引其后面的部分。
例如表t组合索引(a,b) 执行explain SELECT * FROM  t where  t.a= 123  and t.b like 'abc%'; 这个时候是无法直接使用组合索引的，如果没有ICP mysql会先在存储引擎层根据索引过滤掉a=123的记录，然后把这些记录传回mysql server层再过滤 b like 'abc%'，开启ICP之后，后者也会下沉到存储引擎层进行过滤。
类似的，如果没有ICP，mysql不光会在存储引擎层返回多余的数据，如果对查询语句加锁的话，mysql也会锁住多余的行，所以即使使用了索引，InnoDB也有可能锁住一些不需要的数据。如果不能使用索引查找的锁定行的话，mysql会做全表扫描并锁住所有的行，而不管是不是需要。
mysql有两种方式可以生成有序的结果，通过排序操作，或者按索引顺序扫描，如果EXPLAIN出来的type列的值为index，则说明mysql使用了索引扫描来做排序
只有当索引的顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样时，MYSQL才能够使用索引来对结果做排序
严格来说ORDER BY满足两种情况时会使用index排序：1.没有where子条件且ORDER BY语句使用索引最左前列 2.使用的where子句与order by子句条件列组合在一起满足索引最左前列（前提是where子句里不是范围查询）
扫描索引本身是很快的，因为只需要从一条索引记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行，这基本上都是随机IO，因此按索引顺序读取数据的速度通常要比顺序地全表扫描慢，尤其是在IO密集型的工作负载时。
尽可能将需要做范围查询的列放到组合索引的后面，以便优化器能使用尽可能多的索引列
可以在索引中加入更多的列，并通过IN（）的方式覆盖那些不在WHERE子句中的列，但这种技巧也不能滥用，因为每额外增加一个IN()条件，优化器需要做的组合都将以指数形式增加，最终可能会极大地降低查询性能
从EXPLAIN的输出很难区分mysql是要查询范围值还是查询列表值，对>,<和in的where子句EXPLAIN使用同样的词range来描述type字段
组合索引对于范围条件查询，mysql无法再使用范围列后面的其他索引列了，例如表t索引(a,b)对于explain select * from t where a>1 and b = 1; 则只会使用组合索引中的a列
mysql使用文件排序对小数据集是很快的，但是大数量就很慢了，可以为where子句和order by列建立组合索引来加速
对于limit的分页查询，无论如何创建索引，当翻页到很后面的时候查询都是个严重的问题，因为随着偏移量的增加，mysql需要花费大量的时间来扫描需要丢弃的数据，一个比较好的策略是使用覆盖索引查询返回需要的主键，再根据这些主键关联原表获得需要的行，这可以减少mysql扫描那些需要丢弃的行数，例如组合索引(sex,rating)
select * from t inner join(select pk from t where t.sex='M' order by rating limit 100000,10) as x on t.pk = x.pk;
总的来说，编写查询语句时应该尽可能选择合适的索引以避免单行查找，尽可能地使用数据原生顺序从而避免额外的排序操作，并尽可能使用索引覆盖查询
响应时间是两个部分之和：服务时间和排队时间。服务时间是指数据库处理这个查询真正花了多长时间，排队时间是指服务器因为等待某些资源而没有真正执行查询的时间，可能是等IO操作完成，也可能是等待行锁，但是实际情况更加复杂
分析查询时，查看该查询扫描的行数是非常有帮助的，这在一定程度上能够说明该查询找到需要的数据的效率高不高，理想情况下扫描的行数和返回的行数应该是相同的，但实际情况中这种事不多，例如在做一个关联查询时，服务器必须要扫描多行才能生成结果集中的一行
explain
extra
临时表（磁盘临时表，内存临时表）：Extra列包含Using temporary
覆盖索引：Extra列包含Using index，如果extra只有using index一般是查询列是索引列且没有where子句
ICP（索引条件下推）：Extra列包含Using Index Condition
使用索引做排序：type列的值为index，extra没有filesort
using where:在查找使用索引的情况下，需要回表去查询所需的数据
using index & using where:使用了索引覆盖且不需要回表查询
select_type: SIMPLE,PRIMARY,SUBQUERY,UNION
type: NULL(无需查表)>system(查询系统表)>const(主键查询)>eq_ref(唯一索引查询)>ref(普通索引查询)>ref_or_null(普通索引查询包含Null)>index_merge(索引合并)>range(范围索引查询)>index(遍历索引树)>ALL(遍历全表)
一般mysql能够使用如下三种方式应用where条件，从好到坏依次为：
1.在索引中使用where条件来过滤不匹配的记录，这是在存储引擎层完成的
2.使用索引覆盖扫描来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。这是在mysql服务器层完成的，但无须再回表查询记录
3.从数据表中返回数据，然后过滤不满足条件的记录（在extra列中出现using where），这是在mysql服务器层完成，mysql需要先从数据表读出记录然后过滤
mysql客户端和服务器之间的通信协议是半双工的，这意味着，在任何一个时刻，要么是由服务器向客户端发送数据，要么是由客户端向服务器发送数据，这两个动作不能同时发生，一旦客户端发送了请求，它能做的事情就只有等待，一旦服务器开始发送相应数据，客户端必须全部接受完，没法让服务器停下来，这也是在必要的时候一定要在查询中加上limit限制的原因。
多数连接mysql的库函数（一般是客户端的应用服务器）都可以获得全部结果集并缓存到应用服务器内存里，还可以逐行获取需要的数据，默认一般是获得全部结果集并缓存到内存中。mysql通常需要等所有的数据都已经发送给客户端才能释放这条查询所占用的资源，所以接收全部结果并缓存通常可以减少服务器的压力，让查询能够早点结束，早点释放相应的资源。如果需要返回一个很大的结果集的时候，应用服务器的内存可能会被撑爆
对于一个mysql连接，或者说一个线程，任何时刻都有一个状态，该状态表示了mysql当前正在做什么，有很多种方式能查看当前的状态，最简单的是使用SHOW FULL PROCESSLIST命令，各个状态释义如下：
sleep：正在等待客户端的请求 Query：正在执行查询或者正在将结果发送给客户端 Locked：正在等待表锁 Analyzing and statistics:正在收集存储引擎的统计信息，并生成查询的执行计划 coping to tmp table: 将执行结果都复制到一个临时表中，这种状态要么是在Group by，要么是文件排序操作，或者是UNION操作 sorting result:正在对结果进行排序 sending data:在多个状态之间传送数据
内部临时表是一种特殊轻量级的临时表，用来进行性能优化。这种临时表会被MySQL自动创建并用来存储某些操作的中间结果。这些操作可能包括在优化阶段或者执行阶段。这种内部表对用户来说是不可见的，但是通过EXPLAIN或者SHOW 　　STATUS可以查看MYSQL是否使用了内部临时表用来帮助完成某个操作。内部临时表在SQL语句的优化过程中扮演着非常重要的角色， MySQL中的很多操作都要依赖于内部临时表来进行优化。但是使用内部临时表需要创建表以及中间数据的存取代价，所以用户在写SQL语句的时候应该尽量的去避免使用临时表。
　　内部临时表有两种类型：一种是HEAP临时表，这种临时表的所有数据都会存在内存中，对于这种表的操作不需要IO操作。另一种是OnDisk临时表，顾名思义，这种临时表会将数据存储在磁盘上。OnDisk临时表用来处理中间结果比较大的操作。如果HEAP临时表存储的数据大于MAX_HEAP_TABLE_SIZE（详情请参考MySQL手册中系统变量部分），HEAP临时表将会被自动转换成OnDisk临时表。
MySQL在以下几种情况会创建临时表：
1、UNION查询；
2、用到TEMPTABLE算法或者是UNION查询中的视图；
3、ORDER BY和GROUP BY的子句不一样时；
4、表连接中，ORDER BY的列不是驱动表中的；
5、DISTINCT查询并且加上ORDER BY时；
6、SQL中用到SQL_SMALL_RESULT选项时；
7、FROM中的子查询；
8、子查询或者semi-join时创建的表；
在解析一个查询语句之前，如果查询缓存是打开的，那么mysql会优先检查这个查询是否命中查询缓存中的数据。这个检查是通过一个对大小写敏感的哈希查找实现的。查询和缓存中的查询即使只有一个字节不同，也不会匹配缓存结果，如果命中了查询缓存，mysql会跳过所有其他阶段，直接从缓存中拿到结果并返回给客户端
语法解析和预处理
首先，MySQL通过关键字将sql语句进行解析，并生成一棵解析树，然后由优化器将其转化成执行计划。一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到最好的执行计划
MySQL使用基于成本的优化器，它将尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。有很多种原因会导致MySQL优化器选择错误的执行计划：例如统计信息不准确，MySQL依赖存储引擎提供的统计信息来评估成本，但是有的存储引擎提供的信息偏差可能非常大。执行计划中的成本估算不等同于实际执行的成本。所以即使统计信息精准，优化器给出的执行计划也可能不是最优的。例如有时候某个执行计划虽然需要更多的页面，但是它的成本却更小。因为如果这些页面都是顺序读或者都已经在内存中的话，那么它的访问成本将很小。MySQL层面并不知道哪些页面在内存中，哪些在磁盘上，所以实际查询需要多少次IO时无法得知的。MySQL从不考虑其他并发执行的查询
下面是一些MySQL能够处理的优化类型
1.重新定义关联表的顺序 数据表的关联并不总是按照在查询中指定的顺序进行，决定关联的顺序是优化器很重要的一部分功能
2.将外连接转化成内连接 
3.使用等价变换规则 MySQL可以使用一些等价变化来简化并规范表达式 例如（1=1 and a>5）将被改写成为a>5
4.优化count()、min()和max() 
5.预估并转化为常数表达式 例如主键查询可以直接转化为const
6.覆盖索引扫描 直接查询索引返回所需的数据，无需回表
7.子查询优化 8.提前终止查询
对于UNION查询，MySQL先将一系列的单个查询结果放到一个临时表，然后再重新读出临时表数据来完成UNION查询
当前MySQL关联执行的策略很简单，MySQL对任何关联都执行嵌套循环关联操作，即MySQL先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为止。然后根据各个表匹配的行，返回查询中需要的各个列
从本质上说，MySQL对所有的类型的查询都以同样的方式运行。例如，MySQL在from子句中遇到子查询时，先执行子查询并将其结果放到一个临时表，然后将这个临时表当做一个普通表对待，MySQL的临时表是没有任何索引的，在编写复杂的子查询和关联查询的时候需要注意这一点，这一点对UNION查询也一样
MySQL优化器最重要的一部分就是关联查询优化，它决定了多个表关联时的顺序，通常多表关联的时候，可以有多种不同的关联顺序来获得相同的执行结果。关联查询优化器则通过评估不同顺序时的成本来选择一个代价最小的关联顺序。按照上述MySQL关联执行的策略来看，小表在前，大表在后，查询的次数会少一些，即小表驱动大表，至于谁驱动谁是MySQL优化器决定的，而不是sql里的位置，可以使用关键字STRAIGHT_JOIN重写查询，让优化器按照你认为的最优关联顺序执行（但是自己实际试的时候发现MySQL总是按照前表驱动后表？）
无论如何排序都是一个成本很高的操作，所以从性能角度考虑，应尽可能避免排序或者尽可能避免对大量数据进行排序
当不能使用索引生成排序结果的时候，MySQL需要自己进行排序，如果数量小则在内存中进行，如果数据量大则需要使用磁盘，不过MySQL将这个过程统一称为文件排序，即使完全是内存排序不需要任何磁盘文件时也是如此。
MySQL在进行文件排序的时候需要使用的临时存储空间可能会比想象的要大的多，原因在于MySQL在排序时，对每一个排序记录都会分配一个足够长的定长空间来存放。例如，如果是VARCHAR字段，则会预留最大长度字节的空间
在关联查询的时候如果需要排序，MySQL会分两种情况来处理，如果ORDER BY子句中的所有列都来自关联的第一个表，那么MySQL在关联处理第一个表的时候就进行文件排序，在explain中可以看到extra为Using filesort，除此之外，MySQL都会先将关联的结果存放到一个临时表中，然后在所有的关联都结束后，再进行文件排序。此时extra为Using temporary;Using filesort。如果查询中有limit的话，limit也会在排序之后应用，所以即使返回的数据很少，临时表和需要排序的数量量仍然会非常大
MySQL将结果集返回客户端是一个增量、逐步返回的过程，一旦服务器处理完开始生成第一条结果时，MySQL就可以开始向客户端逐步返回结果集了，结果集中的每一行都会以一个满足MySQL协议的封包发送，再通过TCP协议进行传输
查询优化器hint
HIGN_PRIORITY和LOW_PRIORITY设置sql语句执行优先级
STRAIGHT_JOIN 第一个用法是让查询中所有的表按照在语句中出现的顺序进行关联，第二个用法是固定其前后两个表的关联顺序
FOR UPDATE 和 LOCK IN SHARE MODE 对符合查询条件的数据行加锁，对于INSERT...SELECT语句是不需要的，会默认加锁
USE INDEX，INGORE INDEX，FORCE INDEX
优化关联查询
确保ON或者USING子句的列上有索引，在创建索引的时候就要考虑到关联的顺序，当表A和表B用列C关联的时候，如果是A驱动B，那么就不需要在前者对应的列上加索引了。一般来说，除非有其他理由，否则只需要在关联顺序中的第二个表对应的列上加索引
确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化
当升级MySQL的时候需要注意，关联语法、运算符优先级等其他可能会发生变化的地方，因为以前是普通关联的地方可能会变成笛卡尔积。
关于子查询优化最重要的优化建议就是尽可能使用关联查询替代
优化limit分页
1.尽可能使用索引覆盖扫描，然后根据需要做一次关联操作再返回所需的列，例如：select A.b, A.c from A INNER JOIN (SELECT b from A order by d limit 50,5) as lim USING(id)
2.LIMIT和OFFSET的问题，其实是OFFSET的问题，它会导致MySQL扫描大量不需要的行然后再抛弃掉，如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用OFFSET，例如：select * from t where t.a<1000 order by id desc limit 20;
优化UINON查询
除非确实需要服务器消除重复的行，否则就一定要加上UNION ALL，如果没有ALL，MySQL会给临时表加上DISTINCT选项，这会导致对整个临时表的数据做唯一性检查，这样做的代价非常高
分区表
对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成。实现分区的代码实际上是对一组底层表的句柄对象的封装。对分区表的请求，都会通过句柄对象转化成对存储引擎的接口调用。所以分区对于sql层来说是一个完全封装底层实现的黑盒子，对应用是透明的，但是从底层的文件系统来看就很容易发现，每一个分区表都有一个使用#分隔命名的表文件，这意味着索引也是按照分区的子表定义的，而没有全局索引。
分区的一个主要目的是将数据按照一个较粗的粒度分在不同的表中。这样做可以将相关的数据存放在一起，另外，如果想一次批量删除整个分区的数据也会变得很方便，从存储引擎的角度来看，底层表和一个普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分
视图
视图本身是一个虚拟表，不存放任何数据，在使用sql语句访问视图的时候，它返回的数据是MySQL从其他表中生成的。实现视图最简单的方法是将select语句的结果存放到临时表中。当需要访问视图的时候，直接访问这个临时表就可以了。实现视图更好的方法是重写含有视图的查询，将视图的定义sql直接包含进查询的sql中。MySQL可以使用这两种办法中的任何一种来处理视图。这两种算法分别称为合并算法和临时表算法。如果是打算用视图来提升性能，需要做比较详细的测试，即使是合并算法实现的视图也会有额外的开销，而且视图的性能很难预测。
如果只是使用外键做约束，那通常在应用程序里实现该约束会更好，外键会带来很大的额外消耗
绑定变量
当创建一个绑定变量sql时，客户端向服务器发送了一个sql语句的原型，服务器端收到这个sql语句后，解析并存储这个sql语句的部分执行计划，返回给客户端一个sql语句处理句柄。以后每次执行这类查询，客户端都指定使用这个句柄，绑定变量的sql，使用问号标记可以接受参数的位置，当真正需要执行具体查询的时候，则使用具体值代替这些问号，例如：INSERT INTO t(col1,col2) values(?,?); 可以通过向服务器端发送各个问号的取值和这个sql的句柄来执行一个具体的查询。具体如何发送取值参数和句柄，则和各个客户端的编程语言有关，使用Java和.net的MySQL连接器就是一种办法，使用绑定变量的优势如下：
1.避免sql注入攻击 2.服务器端只需要解析一次sql语句 3.以二进制的方式只发送参数和句柄，节省带宽
客户端模拟的绑定变量：客户端的驱动程序接收一个带参数的sql，再将指定的值带入其中，最后将完整的查询发送到服务器端
服务器端的绑定变量：客户端使用特殊的二进制协议将带参数的字符串发送到服务器端，然后使用二进制协议将具体的参数值发送给服务器端并执行
sql接口的绑定变量：客户端先发送一个带参数的字符串到服务器端，这类似于使用prepare的sql语句，然后发送设置参数的sql，最后使用execute来执行sql
查询缓存
查询缓存系统会跟踪查询中涉及的每个表，如果这些变发生变化，那么和这个表相关的所有的缓存数据都将失效。这种机制效率看起来很低，因为数据表变化时很可能对应的查询结果并没有变更，但是这种简单实现代价很小，而这点对于一个非常繁忙的系统来说非常重要。
MySQL判断缓存命中的方法很简单：缓存存放在一个引用表中，通过一个哈希值引用，这个哈希值包含了如下因素，即查询本身、当前查询的数据库、客户端协议的版本等。任何字符上的不同，例如空格、注释都会导致缓存的不命中，当查询语句中有一些不确定的数据时，则不会被缓存。例如now()之类的，准确的说法应该是：如果查询语句中包含任何的不确定函数，那么在查询缓存中是不可能找到缓存结果的，因为在检查查询缓存的时候，还没有解析sql语句，所以MySQL并不知道查询语句中是否包含这类函数
对InnoDB引擎，失误是否可以访问查询缓存取决于当前事务ID，以及对应的数据表上是否有锁。每一个InnoDB表的内存数据字典都保存了一个事务的ID号，如果当前事务ID小于该事务ID，则无法访问查询缓存，InnoDB中如果表上有任何的锁，那么对这个表的任何查询语句都是无法被缓存的，原则上，在InnoDB的MVCC架构下，当某些修改不影响其他事务读取一致的数据时，是可以使用查询缓存的，但是这样实现起来会非常复杂，InnoDB做了一个简化，让所有有加锁操作的事务都不使用任何查询缓存，这个限制其实并不是必须的
InnoDB在默认情况下是16KB的页。如果InnoDB做一个单行查找需要读取磁盘，就需要把包含该行的整个页面读入缓冲池进行缓存，这会引起一些缓存的浪费。假设要随机访问100字节的行，InnoDB将用掉缓冲池中很多额外的内存来缓存这些行，因为每一行都必须读取和缓存一个完整的16KB页面。因为工作集也包括索引，InnoDB也会读取并缓存查找行所需的索引树的一部分。InnoDB的索引页大小也是16KB，这意味着访问一个100字节的行可能一共要使用32KB
复制
MySQL支持两种复制方式：基于行的复制和基于语句的复制，基于行的复制在5.1版本中才加进来，这两种方式都是通过在主库上记录二进制日志，在备库重放日志的方式来实现异步的数据复制，这意味着，在同一时间点备库上的数据可能与主库存在不一致，并且无法保证主备之间的延迟。一些大的语句可能导致备库产生几秒、几分钟甚至几个小时的延迟。
复制通常不会增加主库的开销，主要是启用二进制日志带来的开销，但出于备份或及时从崩溃中恢复的目的，这点开销也是必要的。除此之外，每次备库也会对主库增加一些负载，尤其当备库请求从主库读取旧的二进制日志文件时，可能会造成更高的IO开销
复制有三个步骤
1.在主库上把数据更改记录到二进制日志binlog中 2.备库将主库上的日志复制到自己的中继日志中 3.备库读取中继日志中的事件，将其重放到备库数据之上
第一步在每次准备提交事务完成数据更新前，主库将数据更新的事件记录到二进制日志中，MySQL会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志，在记录二进制日志后，主库会告诉存储引擎可以提交事务了
备库的全量复制，需要有三个条件来让主库和备库保持同步
1.在某个时间点的主库的数据快照 2.主库当前的二进制日志文件，和获得数据快照时在该二进制日志文件中的偏移量，我们把这两个值称为日志文件坐标 3.从快照事件到现在的二进制日志
sync_binlog=1如果开启该选项，MySQL每次在提交事务前会将二进制日志同步到磁盘上，保证在服务器崩溃时不会丢失事件，如果禁止该选项，服务器会少做一些工作，但二进制文件可能在服务器崩溃时损坏或丢失信息。在一个不需要作为主库的备库上，该选项带来了不必要的开销
基于语句的复制
基于语句的复制模式下，主库会记录那些造成数据更改的查询，当备库读取并重放这些事件时，实际上只是把主库上执行过的sql再执行一遍。最明显的好处是实现简单，理论上讲，简单地记录和执行这些语句，能够让主备保持同步，另一个好处是二进制日志里的事件更加紧凑，所以相对而言，基于语句的模式不会使用太多带宽。但事实上基于语句的方式可能并不如其看起来那么便利，因为主库上的数据更新除了执行的语句外，可能还依赖于其他因素，例如，同一个条sql在主库和备库上执行的事件可能不同，使用current_user()函数的语句，另外一个问题是更新必须是串行的，这需要更多的锁
基于行的复制
最大的好处是可以正确地复制每一行，一些语句可以被更加有效地复制，由于无须重放更新主数据库的查询，使用基于行的复制模式能够更高效地复制数据，但另一方面，有些语句基于行的复制代价会很大，例如update t set t.c=0; 由于这条语句做了全表更新，使用基于行的复制开销会很大，因为每一行的数据都会被记录到二进制日志中，这使得二进制日志文件非常庞大，并且会给主库上记录日志和复制增加额外的负载。
由于没有哪种模式对所有情况都是完美的，MySQL能够在这两种模式间动态切换。默认情况下使用的是基于语句的复制方式，但如果发现语句无法被正确地复制，就切换到基于行的复制模式
复制的基本原则
1.一个MySQL备库只能有一个主库 2.每个备库必须有一个唯一的服务器ID 3.一个主库可以有多个备库 4.如果打开了log_slave_updates选项，一个备库可以把其他主库上的数据变化传播到其他备库
比较常见的读写分离方法如下：
基于查询分离：最简单的是将所有不能容忍脏数据的读和写查询分配到主库服务器上，但事实上无法有效地使用备库，因为只有很少的查询能容忍脏数据
基于版本分离：跟踪对象的版本或时间戳来判断数据是否足够新，如果备库的数据太旧，可以从主数据库获取最新的数据
大多数读写分离解决方案都需要监控复制延迟来决策读查询的分配，不管是通过复制或负载均衡器，或者一个中间系统
负载均衡器
在市场上有许多负载均衡硬件和软件，但很少有专门为MySQL服务器设计的，web服务器通常更需要负载均衡，因此许多多用途的负载均衡设备都会支持HTTP，而对其他用途只有一些很少的基本特性。MySQL连接都只是正常的TCP/IP连接，所以可以在MySQL上使用多用途负载均衡器，但由于缺少MySQL专有的特性，因此会多一些限制。
1.除非负载均衡器知道MySQL的真实负载，否则在分发请求时可能无法做到很好的负载均衡
2.许多负载均衡器知道如何检查一个HTTP请求并把会话固定到一个服务器上以保护在web服务器上的会话状态。MySQL的连接无法保持会话状态，如果单个会话的请求都是发到同一个MySQL服务器，服务器的缓存会更有效率
3.连接池和长连接可能会阻碍负载均衡器分发连接请求。例如，一个连接池打开了预先配置好的连接数，负载均衡器在已有的四个MySQL服务器上分发这些连接。现在增加了两个以上的MySQL服务器，由于连接池不会请求新连接，因而新的服务器会一直空闲着。池中的连接会在服务器间不公平地分配负载，导致一些服务器超出负载，可以在多个层面为连接设置失效时间来缓解这个问题，但这很复杂并且很难做到。连接池方案只有它们本身能够处理负载均衡时才能工作得好
4.许多多用途负载均衡器只会针对HTTP服务器做健康和负载检查，MySQL需要自己来构建健康检查方法
常用负载均衡算法：随机 轮询 最少连接数 最快响应 哈希 权重
高可用性
有时候人们将可用性定义成服务正常运行的时间段，我们认为可用性的定义还应该包括应用是否能以足够好的性能处理请求。有许多方法可以让一个服务器保持运行，但服务并不是真正可用
如何实现高可用：1.降低系统失效的频次，预防宕机的出现 2.降低平均恢复时间 3.避免单点失效（不只是单台服务器，还要避免单个数据中心，单一网络，单个云区域以及单个电力输送网）
MySQL本身并不支持同步复制，同步复制：当主库上的事务只有在至少一个备库上提交后才能认为其执行完成。MySQL中的同步复制首先出现在MySQL Cluster
对于CPU密集型工作负载，最佳并发数等于CPU核数，然而，进程并不总是处于可运行状态的，因为会有一些阻塞式请求，例如IO，数据库查询以及网络请求，因此，最佳并发数通常会比CPU数量高一些
MySQL备份
逻辑备份：通过mysqldump命令将数据导出，可以用编辑器查看导出后的数据
物理备份：直接复制原始文件
物理备份通常更加简单高效，尽管如此，对于需要长期保留的备份，尽量不要完全依赖物理备份，至少每隔一段时间还是需要做一次逻辑备份，当数据量很庞大时，一个常见的策略是做定期的增量或差异备份，差异备份是对自上次全备份后所有改变的部分而做的备份，而增量备份则是自从任意类型的上次备份后所有修改做的备份
经常备份二进制日志是个好主意，如果不能承受丢失超过30分钟数据的价值，至少要每30分钟就备份一次，需要决定日志的过期策略以防止磁盘被二进制日志写满，日志增长多大取决于负载和日志格式，如果可能，只要日志有用就尽可能保留
