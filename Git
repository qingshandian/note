所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的的程序代码等，包括git。版本控制系统可以告诉你每次的改动详细信息，而图片视频这些二进制文件是没法跟踪文件的变化，只知道文件发生的修改，但具体改了什么，版本控制系统是不知道的

微软word文档也是二进制格式的

工作区(working directory) add-> 暂存区(staged directory) commit-> 本地仓库 push-> 远程仓库(remote)

注意idea里看到的文件都是工作区的文件，新建和修改文件后不执行任何命令的话不会对暂存区产生任何影响

git log命令显示从最近到最远的提交日志，注意只是提交日志 

  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数 

git log --pretty=oneline  

  在Git中，用HEAD表示当前版本 ，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100 

回退到上一个版本：git reset --hard HEAD^  

或者后面可以直接跟commit id，--hard表示执行回退命令后本地仓库，暂存区和工作区的代码会一起回滚，包括git log的commit日志也没了 

注意回退到上一个版本后git log里就看不到最后一次提交的记录了，如果这个时候又想回到最后一次的commit版本，需要用git reflog里的操作历史记录来查看最后一次的commit id，reflog会记录所有的版本变化情况，包括回滚的

丢弃工作区的修改：git checkout -- read.txt

该命令的意思是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

1.readme.txt修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态

2.readme.txt已经添加到暂存区后又作了修改，现在，撤销修改就回到添加到暂存区后的状态

总之，就是让这个文件回到最近一次git commit或git add时的状态

丢弃工作区的修改：git checkout -- file

命令中的--很重要，没有的话就变成了 切换到另一个分支的命令

丢弃暂存区的修改：git reset HEAD readme.txt 

git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用HEAD时，表示最新的版本

一般reset之后还需要再checkout一下把工作区的修改也丢弃掉

当工作区文件被删除想要恢复的时候（使用idea右键删除文件会被自动加到暂存区）也可以先reset再checkout

为本地仓库关联远程仓库：git remote add origin https://github.com/qingshandian/Test.git 

远程仓库的名字就是origin，这时git默认的叫法，也可以改成别的

推送远程仓库：git push -u origin master

由于远程库是空的，我们第一次推送新分支时，加上-u参数，Git不但会把本地的分支内容推送到远程新的分支，还会把本地的分支和远程的分支关联起来，在以后的推送或者拉取时就可以简化命令

git checkout -b dev 相当于以下两条命令 git branch dev +  git checkout dev

查看当前分支：git branch 

git branch命令会列出所有分支，当前分支前面会标一个*号

查看远程分支 git branch -r  

删除分支：git branch -d <name>  

创建+切换分支：git checkout -b <name>或者git switch -c <name>

我们注意到切换分支使用git checkout <branch>，而前面讲过的撤销修改则是git checkout -- <file>，同一个命令，有两种作用，确实有点令人迷惑。实际上，切换分支这个动作，用switch更科学。因此，最新版本的Git提供了新的git switch命令来切换分支

  用git log --graph命令可以看到分支合并图  

  通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。即当我们使用快进模式合并分支后再使用git log查看日志会分不清历史的提交记录是属于哪个分支的，因为两个分支所有的提交记录会按时间顺序合并成一条线

如果要强制禁用Fast Forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。此处就会使用到 --no-ff 参数方式merge提交了，禁用快进模式合并后再查看日志就会发现两个分支的提交记录是两条线，很容易分清每个提交记录是属于哪个分支，就算把被合并的分支删除了也是能看到两条线，只不过不知道另外一条线的分支名

将工作区的所有修改暂存起来，暂时清空工作区的所有修改：git stash，stash之后就可以放心地切换其他分支开发了

还原stash：git stash list -> git stash pop/git stash apply 

 建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name  

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id    

注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息  

标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。

$ git config --global alias.st status
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
$ git config --global alias.unstage 'reset HEAD'
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"

git撤销merging：重置index到HEAD节点  git reset --hard HEAD  or  git merge --abort

查询git日志  git log --pretty=oneline --abbrev-commit    git log --graph --pretty=oneline --abbrev-commit

git reset --soft HEAD~1 撤回最近一次的commit(撤销commit，不撤销git add)

git reset --mixed HEAD~1 撤回最近一次的commit(撤销commit，撤销git add)

git reset --hard HEAD~1 撤回最近一次的commit(撤销commit，撤销git add,还原改动的代码)

git status 命令的输出十分详细，但其用语有些繁琐。 Git 有一个选项可以帮你缩短状态命令的输出，这样可以以简洁的方式查看更改。 如果你使用 git status -s 命令或 git status --short 命令，你将得到一种格式更为紧凑的输出。

git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。

若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --staged 命令。 这条命令将比对已暂存文件与最后一次提交的文件差异

 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤

有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交：

$ git commit --amend

这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令）， 那么快照会保持不变，而你所修改的只是提交信息。

 git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。而git pull其实是在fetch之后merge了一下当前分支，注意是只merge当前分支

默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。当其他人从仓库中克隆或拉取，会自动得到你的那些标签。

在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支

当抓取fetch到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：$ git checkout -b serverfix origin/serverfix，这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。

当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式，由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：

$ git checkout serverfix

git rebase变基

                          -> C4(dev) ->

C0 -> C1 -> C2 ->      C3     -> C5(master)

整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。

它的原理是首先找到这两个分支（即当前分支 dev、变基操作的目标基底分支 master） 的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。

$ git checkout dev

$ git rebase master

现在回到 master 分支，进行一次快进合并

$ git checkout master

$ git merge dec

这和直接merge的结果没有任何区别，但是变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。

一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。

请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。

在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。

如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。就是说如果你的dev分支的某些commit已经push过并且被其他人pull去使用了，那么就不要对你的dev进行任何变基操作

变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。
