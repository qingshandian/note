算法

选择排序
首先，找到数组中最小的元素，其次将它和数组的第一个元素交换位置。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。
它有两个很鲜明的特点：1.运行时间和输入无关 2.数据移动是最少的 每次交换都会改变两个数组元素的值，因此选择排序用了N次交换-交换次数和数组的大小是线性关系，其他大部分算法都不具备这个特征

int n = a.length;
for(int i=0; i<n; i++){
	int min = i;
	for(int j=i+1; j<n; j++){ //内循环从i+1开始
		if(a[j] < a[min]){
			min = j;
		}
	}
	exchange(a, i, min); //交换第i个和第min个元素，交换发生在外循环
}

插入排序
与选择排序一样，当前索引左边的所有元素都是有序的，但他们的最终位置还不确定，为了给更小的元素腾出空间，它们可能会被移动。和选择排序不同的是，插入排序所需的时间取决于输入中元素的初始顺序。例如，对一个很大且其中元素已经有序的数组进行排序将会比对随机顺序的数组进行排序要快得多

int n = a.length;
for(int i=1; i<n; i++){
	for(int j=i; j>0&&a[j]<a[j-1]; j--){ //内循环从i开始，从右向左依次比较，遇到大的就交换，其实也可以将较大的元素都依次向右移动而不总是交换两个元素
		exchange(a, j, j-1);
	}
}

冒泡排序
把大的数冒泡到后面
int n = a.length;
for(int i=0; i<n-1; i++){ //这里要用n-1，因为下面会取a[j+1],用n的话会越界
	for(int j=0; j<n-i-1; j++){ //和上面两个不一样，内循环从0开始，n-i-1结束
		if(a[j] > a[j+1]){
			exchange(a, j, j+1);
		}
	}
}

希尔排序（插入排序的改进）
对于大规模乱序数组插入排序很慢，因此它只会交换相邻的元素，因此元素只能一点一点从数组的一端移动到另一端。例如，如果主键最小的元素正好在数组的尽头，要将它挪到正确的位置就需要n-1次移动，希尔排序为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序
希尔排序更高效的原因是它权衡了子数组的规模和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。希尔排序是我们唯一无法准确描述其对于乱序的数组的性能特征的排序方法
int n = a.length;
int h = 1;
while(h < n/3) h = 3*h + 1; //1,4,13,40...
while(h >= 1){
	for(int i=h; i<n; i++){
		for(int j=i; j>=h&&a[j]<a[j-h]; j-=h){ //将a[i]插入到a[i-h], a[i-2*h], a[i-3*h]
			exchange(a, j, j-h);
		}
	}
	h = h/3;
}

归并排序
要将一个数组排序，可以先递归地将它分成两半分别排序，然后将结果归并起来，归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需时间和NlogN成正比，它的主要缺点是它所需的额外空间和N成正比
实现归并的一种直接了当的办法是将两个不同的有序数组归并到第三个数组中，创建一个适当大小的数组然后将两个输入数组中的元素一个个从小到大放入这个数组中。原地归并的实现都非常复杂，尤其是和使用额外空间的方法相比
public static void merge(int[] a, int low, int mid, int high){
	//将a[low..mid] 和 a[mid+1..high]归并
	int i=low,j=mid+1;
	//先把所有数据都复制到临时数组中
	for(int k=low; k<=high; k++){
		aux[k] = a[k];
	}
	for(int k=low; k<=high; k++){
		if(i > mid) a[k] = aux[j++]; //说明前半段已经排完了
		else if(j > high) a[k] = aux[i++]; //说明后半段已经排完了
		else if(aux[j] < aux[i]) a[k] = aux[j++];
		else a[k] = aux[i++];
	}
}

private static int[] aux; //辅助数组

public static void sort(int[] a){
	aux = new int[a.lenth];
	sort(a, 0, a.length-1);	
}

private static void sort(int[] a, int low, int high){
	if(high <= low) return;
	int mid = low + (high - low)/2;
	sort(a, low, mid);
	sort(a, mid+1, high);
	merge(a, low, mid, high);
}
整体的逻辑是先将a[0]和a[1]归并，再将a[2]和a[3]归并，然后再将a[0..1]和a[2..3]归并，sort方法的作用其实在于安排多次merge()方法调用的正确顺序

快速排序
是应用最广泛的排序算法，在大多数实际情况中，快排是最佳选择，快速排序的一次划分算法从两头交替搜索，直到low和high重合，因此其时间复杂度是O(n)，而整个快排算法的时间复杂度与划分的趟数有关，理想的情况是，每次划分所选择的中间数恰好将当前序列等分，经过log2 n趟划分，便可得到长度为1的子表，这样整个算法的时间复杂度是O(nlog2 n)，最坏的情况是，每次所选的中间数是当前序列的最大或最小元素，使得整个排序算法时间复杂度为O(n平方)，可以证明，快排的平均时间复杂度也是O(nlog2 n)
从空间性能上看，尽管快排只需要一个元素的辅助空间，但需要一个栈空间来实现递归。这样快排的空间复杂度为O(log2 n)
快排是一种分治的算法，它将一个数组分成两个子数组，将两部分独立地排序。快排和归并排序是互补的，归并排序是将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序，而快排将数组排序的方式则是当两个子数组都有序时整个数组就自然有序了。第一种情况递归调用发生在处理整个数组之前，第二种发生在处理整个数组后，在归并排序中，一个数组被等分成两半，而在快排中，切分的位置取决于数组的内容

private static void fastSort(int[] a, int left, int right){
	//递归的结束条件
	if(left > right){
		return;
	}
	//缓存起来后面要用
	int i = left;
	ing j = right;
	//取第一个数为基准点
	int temp = a[i];
	while(i != j){
		//右边先走，碰到比基准点小的就停下，一定要右边先走，因为选的基准点在左边，右边先走的话最终两者相遇时的位置是小于基准点的，否则如果左边先走的话
		//最终相遇时的位置可能是大于基准值的，这样和基准值替换的话，比基准值大的值就被替换到第一个位置了，而且比较时一定是>=
		while(a[j]>=temp && i!=j){
			j--;
		}
		//左边后走，碰到比基准点大的就停下，比较一定是<=，否则基准值一开始就被替换了，基准值必须是要比较完成后才可以替换位置
		while(a[i]<=temp && i!=j){
			i++;
		}
		//交换ij，只是交换，i和j下标并没有移动，下次循环会继续比较，下次循环i和j一定不会在j处相遇
		if(i!=j){
			int t = a[i];
			a[i] = a[j];
			a[j] = t;
		}
	}
	//交换基准点位置
	a[left] = a[i];
	a[i] = temp;

	//i不需要再参与排序
	fastSort(a, left, i-1);
	fastSort(a, i+1, right);
}

堆排序（对选择排序的改进），直接选择排序中，为了从[1..n]中选出关键字最小的记录，必须进行n-1次比较，然后在[2...n]中选出关键字最小的记录，又需要做n-2次比较。事实上，后面的n-2次比较中，有许多比较可能在前面的n-1次比较中已经做过，但由于前一趟排序时未保留这些比较结果，所以后一趟排序又重复执行了这些比较操作。堆排序可通过树形结构保存部分比较结果，可减少比较次数
堆排序过程：第一遍从底向上，从最后一个非叶子结点(n/2-1)开始和两个子结点比较找出最大的结点并替换，然后依次向前一个一个结点类似处理直到根节点，此时根结点最大，然后将根结点与末尾结点交换，第二遍从顶向下（从第二遍开始，堆整体已经满足大顶堆的性质，不需要再从底部重新比较替换了，也就是上面所说的前几次的排序结果被保存了下来）,从根结点开始和两个子结点比较并替换，如果有一个子结点被替换，则该子树的大顶堆性质被破坏，需要从该子结点开始再次比较替换，如果该子结点的子结点也被替换了，则再向下处理，一直到叶子结点为止，此时该堆被成功修复成大顶堆，将根结点与倒数第二个结点替换，重复上述步骤直到所有结点排序完毕


调整堆的方法：设有m个元素的堆，输出堆顶元素后，剩下m-1个元素，将堆底元素送入堆顶，堆被破坏，将根结点与左、右子树中较小的元素进行交换，若与左子树交换，

public static void heapSort(int[] a){
	//第一趟从最后一个非叶子结点(n/2-1)开始依次往前一个一个结点处理
	for(int i=a.length/2-1; i>=0; i--){
		adjustHeap(a, i ,a.length);
	}
	//第2趟到第n趟都是从顶点开始往下处理
	for(int j=a.length-1; j>0; j--){
		//交换顶点与末尾结点，先交换再调整，第一趟的交换也是在这里处理的
		swap(a, 0 , j);
		adjustHeap(a, 0, j);
	}
}

public static void adjustHeap(int[] a, int i, int length){
	//取i结点的值
	int temp = a[i];
	//从i结点的左子结点开始
	for(int k=i*2+1; k<length; k=k*2+1){
		//判断左右子结点谁大
		if(k+1<length && a[k] < a[k+1]){
			k++;
		}
		//判断左右子结点是否大于i结点
		if(a[k] > temp){
			//替换较大的结点
			a[i] = a[k];
			//子树的大顶堆特性被破坏，从被破坏的结点开始处理
			i = k;
		} else {
			//无需替换，直接退出循环
			break;
		}
	}
	//将顶点的值放入最终的位置，如果发生过堆破坏修复此时i已经变成最后一个替换结点了，如果没有发生过还是将原值复制给i
	a[i] = temp;
}


Java系统库的排序算法
对原始数据类型使用三向切分的快速排序，对引用类型使用归并排序。这些选择实际上也暗示着用速度和空间来换取稳定性
三向切分的快速排序仅适合重复值比较多的集合排序，对于没有重复值的集合，三向切分的快速排序比普通的快速排序要慢很多

三向切分排序
荷兰国旗问题，集合中只有0 1 2三种数值
public static void threeSort(int[] a){
	//左侧指针，中间指针从头部开始，右侧指针从尾部开始
	int lt=0, i=0, rt=a.length-1;
	//中间指针与右侧指针相遇时结束
	while(i < rt){
		if(a[i] == 0){
			swap(a, lt, i);
			lt++; i++;
		} else if (a[i] == 2){
			swap(a, rt, i);
			rt--;
		} else {
			i++;
		} 
	}
}

二分查找法
public static int binSearch(int key, int[] a, int low, int high){
	if(low > high) return -1;
	int mid = low + (high-low)/2;
	if(key > a[mid]){
		return binSearch(key, a, mid+1, high);
	}else if(key < a[mid]){
		return binSearch(key, a, low, mid-1);
	}else{
		return mid;
	}
}

使用二叉查找树的算法的运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。在最好的情况下，一课含有N个结点的树是完全平衡的，最坏的情况，树退化成链表

二叉树查找和插入
private Node get(Node x, int key){
	if(x == null) return null;
	if(key > x.value) return get(x.right, key);
	else if(key < x.value) return get(x.left, key);
	else return x;
}

private Node put(Node x, int key){
	if(x == null) return new Node(key);
	if(key > x.value) x.right = put(x.right, key);
	else if(key < x.value) x.left = put(x.left, key);
	else x.value = key;
	return x;
}

private Node min(Node x){
	if(x.left == null) return x;
	return min(x.left);
}

private Node max(Node x){
	if(x.right == null) return x;
	return max(x.right);
}

private void print(Node x){
	if(x == null) return;
	print(x.left);
	System.out.println(x.value);
	print(x.right);
}

private Node deleteMin(Node x){
	if(x.left == null) return x.right;
	x.left = deleteMin(x.left);
	return x;
}

priavte Node delete(Node x, int key){
	if(x == null) return null;
	if(key < x.value) x.left = delete(x.left, key);
	if(key > x.value) x.right = delete(x.right, key);
	else{
		if(x.right == null) return x.left;
		if(x.left == null) return x.right;
		Node t = x;
		x = min(t.right);
		x.right = deleteMin(t.right);
		x.left = t.left;
	}
	return x;
}

树的递归终止条件一般是null值判断，而数组递归的判断条件一般是下标是否越界

2-树 3-树 
一棵完美平衡的2-3查找树中的所有空链接到根节点的距离都应该是相同的
向2-结点中插入新键结点只需要将2-结点替换成3-结点
向一棵只含有一个3-结点的树中插入新键，先将3-结点替换为4-结点，然后将4-结点转换成为一棵由3个2-结点组成的2-3树
向一个父节点为2-结点的3-结点插入新键，先将3-结点替换成4-结点，再将4-结点分解为两个2-结点，同时将父节点替换成3-结点
向一个父节点为3-结点的3-结点插入新键，按照上一步依次向上转换结点直到遇到2-父节点结束或者遇到3-根节点，这时将根节点转换为4-节点并接着分解成3个2-节点，使得树高加1，这次最后的变换仍然保持了树的完美平衡性，因为变换的是根节点

和标准的二叉查找树由上向下生长不同，2-3树的生长是由下向上的

2-3树的上述功能的代码实现不仅需要大量的代码，而且他们所产生的额外开销可能会使算法比标准的二叉查找树更慢，想要简单的实现，需要红黑二叉查找树来表达并实现它

红黑二叉查找树背后的基本思想是用标准的二叉查找树和一些额外的信息（替换3-节点）来表示2-3树。我们将树中的链接分为两种类型：红链接将两个2-结点连接起来构成一个3-结点，黑链接则是2-3树中的普通链接。确切地说，我们将3-节点分解为由一条左斜的红色链接相连的两个2-节点，对于任意的2-3树，只要对结点进行转换，我们都可以立即派生出一棵对应的二叉查找树。我们将这种方式表示2-3树的二叉查找树称为红黑二叉查找树

红黑树的另一种定义是含有红黑链接并满足下列条件的二叉查找树
红链接均为左链接
没有任何一个结点同时和两条红链接相连
该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同

如果我们将一颗红黑树中的红链接画平，那么所有的空链接到根结点的距离都将是相同的。如果我们将由红色链接相连的结点结合，得到的就是一棵2-3树。相反，如果将一棵2-3树中的3-结点画作由红色左链接相连的两个2-结点，那么不会存在能够和两条红链接相连的结点，且树必然是完美黑色平衡的，因为黑链接即为2-3树中的普通链接
方便起见，因为每个结点都只会有一条指向自己的链接，我们将链接的颜色保存在表示结点的Node数据类型的布尔变量color中，如果指向它的链接是红色的，那么该变量为true，黑色则为false

在我们实现某些操作中可能会出现红色右链接或者两条连续的红链接，但在操作完成前这些情况都会被小心地旋转并修复

左旋
Node rorateLeft(Node h){
	Node x = h.right;
	h.right = x.left;
	x.left = h;
	x.color = h.color;
	h.color = RED;
}

在插入新的键时我们可以使用旋转操作帮助我们保证2-3树和红黑树之前的一一对应关系，因为旋转操作可以保持红黑树的两个重要特质：有序性和完美平衡性

如果红黑树中一个结点左右链接都是红色，那么我们可以把这三个结点整体看做一个2-3树中的3-结点，而3-结点可以直接转化为一棵普通的二叉树，所以此时左右链接的红色相互抵消，都变成了黑色

红黑树插入的实现原理上是和2-3树的插入是一致的，只不过红黑树的插入实现会简洁一些，2-3树中的插入算法需要我们分解3-结点，将中间键插入父节点，如此这般直到遇到一个2-结点或是根结点，而红黑树中每次必要的旋转之后我们都会进行颜色转换，这使得中结点变红，在父结点看来，处理这样一个红色结点的方式和处理一个新插入的红色结点完全相同，即继续把红链接转移到中结点上去

总之，只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作，我们就能够保证插入操作后红黑树和2-3树的一一对应关系。在沿着插入点到根结点的路径向上移动时在所经过的每个节点中顺序完成以下操作，我们就能够完成插入操作：
1.如果右子结点是红色的而左子结点是黑色的，进行左旋转
2.如果左子结点是红色的且它的左子结点也是红色的，进行右旋转
3.如果左右子结点均为红色，进行颜色转换

public class RedBlackBST<Key, Value>{
	private Node root;
	private boolean isRed(Node h)
	private Node rotateLeft(Node h)
	private Node rotateRight(Node h)
	private void flipColors(Node h)

	public void put(Key key, Value val){
		root = put(root, key, val);
		root.color = BLACK;
	}

	private Node put(Node h, Key key, Value val){
		if(h == null) return new Node(key, val, 1, RED);
		if(key < h.key) h.left = put(h.left, key, val);
		else if(key > h.key) h.right = put(h.right, key, val);
		else h.val = val;

		if(isRed(h.right) && !isRed(h.left)) h = rorateLeft(h);
		if(isRed(h.left) && isRed(h.left.left)) h = rorateRight(h);
		if(isRed(h.left) && isRed(h.right)) flipColors(h);
		return h;
	}

}

红黑树是一种能够同时实现高效的查找、插入和删除操作的实现，所有基于红黑树的符号表实现都能保证操作的运行时间为对数级别
红黑树的查找成本比普通的二叉树低40%左右
红黑树最吸引人的一点是它的实现中最复杂的代码仅限于put()和删除方法，min,max,select,rank和范围查找方法不做任何改变即可继续使用，因为红黑树也是二叉树而这些操作不会涉及结点的颜色


散列表
如果所有的键都是小的整数，我们可以用一个数组来实现无序的符号表，将键作为数组的索引而数组中键i处存储的就是它对应的值，这样我们就可以快速访问任意键的值，散列表就是用算术操作将键转化为数组的索引来访问数组中的键值对

散列表是算法在时间和空间上做出权衡的经典例子，如果没有内存限制，我们可以直接将键作为数组的索引，那么所有查找操作只需要访问内存一次即可完成。但这种理想情况不会经常出现，另一方面，如果没有时间限制，我们可以使用无序数组并进行顺序查找，这样只需要很少的内存，而散列表则使用了适度和空间和时间并在两个极端之间找到了一种平衡，我们只需要调整散列算法的参数就可以在空间和时间之间作出取舍，我们会使用概率论的经典结论来帮助我们选择适当的参数

如果散列的值计算很耗时，那么我们可以将每个键的散列值缓存起来，即在每个键中使用一个hash变量来保存它的hashCode()返回值。第一次调用hashCode方法需要计算，但之后就直接返回hash变量的值，Java的String对象的hashCode就是使用了这种方法，因为String是不变的

实现散列表的另一种方式就是用大小为M的数组保存N个键值对，其中M>N，我们需要依靠数组中的空位解决碰撞冲突，基于这种策略的方法被称为开放地址散列表。
开放地址散列表中最简单的方法叫做线性探测法：当碰撞发生时，直接检查下一个位置，直到找到该键或者遇到一个空元素。核心思想是与其将内存用作链表，不如将它们作为在散列表的空元素，这些空元素可以作为查找结束的标志

对于典型的应用程序，应该在散列表和二叉查找树之间进行选择，相对于二叉查找树，散列表的优点在于代码更简单，且查找时间最优，二叉查找树的优点在于结构更简单，不需要设计散列函数。大多数程序员第一选择都是散列表，在其他因素更重要时才会选择红黑树

Java中的TreeMap和HashMap分别是基于红黑树和拉链法实现的

图是由一组顶点和一组能够将两个顶点相连的边组成的

邻接表数组：使用一个以顶点为索引的列表数组，其中每个元素都是和该顶点相邻的顶点列表

public class Graph{
	private int v; //顶点数目
	private int e;
	private List<Integer>[] adj;
	public Graph(int v){
		this.v = v;
		this.e = 0;
		adj = (ArrayList<Integer>[])new ArrList[v];
		for(int i=0; i<v; i++){
			adj[i] = new ArrayList<Integer>();
		}
	}
	public void addEdge(int v, int w){
		adj[v].add(w);
		adj[w].add(v);
		e++;
	}
	public Iterable<Integer> adj(int v){
		return adj[v];
	}
}

//图深度优先搜索
public class DepthFirstSearch{
	private boolean[] marked;
	private int count;

	public DepthFirstSearch(Graph g, int s){
		marked = new boolean[g.v()];
		dfs(g, s);
	}

	private void dfs(Graph g, int v){
		marked[v] = true;
		count++;
		for(int w: g.adj(v)){
			if(!marked[w]) dfs(g, w);
		}
	}
}

//图深度优先探索路径查找
public class DepthFirstPaths{
	private boolean[] marked; //这个顶点有没有调用过dfs
	private int[] edgeTo; //遍历过程中走过的每一小段路径，index为终点，value为起点
	private int s; //起点 

	public DepthFirstSearch(Graph g, int s){
		marked = new boolean[g.v()];
		edgeTo = new int[g.v()];
		dfs(g, s);
	}

	private void dfs(Graph g, int v){
		marked[v] = true;
		for(int w: g.adj(v)){
			if(!marked[w]) {
				edgeTo[w] = v; //w是终点，v是起点，从v连接到w
				dfs(g, w);
			}
		}
	}

	//顶点v是否可以到达起点s
	public boolean hasPathTo(int v){
		return marked[v];
	}

	//顶点v到起点s的路径是什么，从终点到起点的路径所以是倒过来的
	public Iterable<Integer> pathTo(int v){
		if(!hasPathTo(v)) return null;
		Stack<Integer> path = new Stack<Integer>();
		for(int x=v; x!=s; x=edgeTo[x])
			path.push(x);
		path.push(s);
		return path;	
	}
}

深度优先搜索得到的路径不仅取决于图的结构，还取决于图的表示和递归调用的性质，无法解决单点最短路径问题，解决这个问题的经典方法叫做广度优先搜索
深度优先搜索像是一个人在走迷宫，广度优先搜索则好像是一组人在一起朝着各个方向走这座迷宫，每个人都有自己的绳子，当出现新的岔路时，可以假设一个探索者可以分裂为更多的人来搜索他们，当两个搜索者相遇时，会合二为一，并继续使用先到达者的绳子
在程序中，在搜索图时遇到有多条边需要遍历的情况时，我们会选择其中一条并将其他通道留到以后再继续搜索。在深度优先搜索中，我们用了一个可以下压的栈（即方法的递归本身就是使用了栈结构），使用LIFO的规则来描述压栈和走迷宫时先探索相邻的通道类似。在广度优先搜索中，我们希望按照与起点的距离的顺序来遍历所有顶点，使用队列来代替栈即可

public class BreadthFirstPaths{
	private boolean[] marked;
	private int[] edgeTo;
	private int s; //起点

	public BreadthFirstPaths(Graph g, int s){
		marked = new boolean[g.v()];
		edgeTo = new int[g.v()];
		this.s = s;
		bfs(g,s);
	}

	private void bfs(Graph g, int s){
		Queue<Integer> queue = new Queue<Integer>();
		marked[s] = true; //标记起点
		queue.enqueue(s); //将它加入队列
		while(!queue.isEmpty()){
			int v = queue.dequeue(); //从队列中取出顶点
			for(int w: g.adj(v)){
				if(!marked[w]){
					edgeTo[w] = v;
					marked[w] = true;
					queue.enqueue(w);
				}
			}
		}
	}
}

判断一个图是否是无环图
public class Cycle{
	private boolean[] marked;
	private boolean hasCycle;
	public Cycle(Graph g){
		marked = new boolean[g.v()];
		for(int s=0; s<g.v(); s++){
			if(!marked[s]){
				dfs(g, s, s);
			}
		}
	}
	private void dfs(Graph g, int v, int u){
		marked[v] = true;
		for(int w: g.adj(v)){
			if(!marked[w]){
				dfs(g, w, v);
			}
			else if(w != u) hasCycle = true;
		}
	}
}

判断一个图是否是二分图
public class TwoColor{
	private boolean[] marked;
	private boolean[] color;
	private boolean isTwoColorable = true;
	public TwoColor(Graph g){
		marked = new boolean[g.v()];
		color = new boolean[g.v()];
		for(int s=0; s<g.v(); s++){
			if(!marked[s])
				dfs(g, s);
		}
	}
	private void dfs(Graph g, int v){
		marked[v] = true;
		for(int w: g.adj(v)){
			if(!marked[w]){
				color[w] = !color[v];
				dfs(g, w);
			}
			else if(color[w] == color[v]) isTwoColorable = false;
		}
	}
}

有向图的表示和无向图一致，甚至更简单
public class Digraph{
	private int v; //顶点数目
	private int e;
	private List<Integer>[] adj;
	public Digraph(int v){
		this.v = v;
		this.e = 0;
		adj = (ArrayList<Integer>[])new ArrList[v];
		for(int i=0; i<v; i++){
			adj[i] = new ArrayList<Integer>();
		}
	}
	public void addEdge(int v, int w){
		adj[v].add(w);
		e++;
	}
	public Iterable<Integer> adj(int v){
		return adj[v];
	}
}
有向图的深度优先搜索代码与无向图的一致

多点可达性的一个重要的实际应用是在典型的内存管理系统中，包括许多Java的实现，在一幅有向图中，一个顶点表示一个对象，一条边则表示一个对象对另一个对象的引用，这个模型很好地表现了运行中的Java程序的内存使用状况。在程序执行的任何时候都有某些对象是可以被直接访问的，而不能通过这些对象访问到的所有对象都应该被回收以便释放内存。标记-清除的垃圾回收策略会为每个对象保留一个位做垃圾收集之用，它会周期性地运行一个类似于深度优先搜索的有向图可达性算法来标记所有可以被访问到的对象，然后清理对象，回收没有被标记的对象

拓扑排序
给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素，如果将所有的顶点从上到下排序，则有向图的箭头都是往下指的
一般用来解决任务优先级问题
一般来说，如果一个有优先级限制的问题中存在有向环，那么这个问题肯定是无解的，要检查这种错误，需要解决下面的问题：有向环检测
一幅有向图中含有的环的数量可能是图的大小的指数级别，因此我们只需要找出一个环即可

//检测有向环
public class DirectedCycle{
	private boolean[] marked;
	private int[] edgeTo;
	private Stack<Integer> cycle; //有向环中的所有顶点
	private boolean[] onStack; //递归调用的栈上的所有顶点

	public DirectedCycle(Digraph g){
		onStack = new boolean[g.v()];
		edgeTo = new int[g.v()];
		marked = new boolean[g.v()];
		for(int v=0; v<g.v(); v++){
			if(!marked[v]) dfs(g, v);
		}
	}

	private void dfs(Digraph g, int v){
		onStack[v] = true; //该顶点进入递归栈
		marked[v] = true;
		for(int w: g.adj(v)){
			if(cycle!=null) return;
			else if(!marked[w]) {edgeTo[w] = v; dfs(g, w);}
			else if(onStack[w]) {
				cycle = new Stack<Integer>();
				for(int x=v; x!=w; x=edgeTo[x]){
					cycle.push(x);
				}
				cycle.push(w);
				cycle.push(v);
			}
		}
		onStack[v] = false; //说明该顶点已离开递归栈
	}
}

有向图中基于深度优先搜索的拓扑排序
public class DepthFirstOrder{
	private boolean[] marked;
	private Queue<Integer> pre; //所有顶点的前序排列
	private Queue<Integer> post; //所有顶点的后序排列
	private Stack<Integer> reversePost; //所有顶点的逆后续排列

	public DepthFirstOrder(Digraph g){
		pre = new Queue<Integer>();
		post = new Queue<Integer>();
		reversePost = new Stack<Integer>();
		marked = new boolean[g.v()];
		for(int v=0; v<g.v(); v++){
			if(!marked[v]) dfs(g, v);
		}
	}

	private void dfs(Digraph g,int v){
		pre.enqueue(v);
		marked[v] = true;
		for(int w: g.adj(v)){
			if(!marked[w]) dfs(g, w);
		}
		post.enqueue(v);
		reversePost.push(v);
	}
}

public class Topological{
	private Iterable<Integer> order;

	public Tolological(Digraph g){
		DirectedCycle cycle = new DirectedCycle(g);
		if(!cycle.hasCycle()){
			DepthFirstOrder dfs = new DepthFirstOrder(g);
			order = dfs.reversePost();
		}
	}
}
尽管该算法很简单，但是它被忽略了很多年，比它更流行的是一种使用队列存储顶点的算法

图的生成树是它的一棵含有其所有顶点的无环连通子图，一幅加权无向图的最小生成树是它的一棵权值最小的生成树

字符串

键索引计数法
int N = a.length;
String[] aux = new String[N];
int[] count = new int[R+1]; //所有排序值的理论最大值
//计算每个值的出现频率（或者说出现的次数，和桶排序类似）
for(int i=0; i<N; i++){
	count[a[i].key() + 1]++;
}
//将频率转换为索引，即计算每个排序值的起始位置（它前面总共有多少个位置被占了）
for(int r=0; r<R; r++){
	count[r+1] += count[r];
}
//将元素分类，对号入座，将每个值依次插入到空位中，插完后把位置向后挪动一位
for(int i=0; i<N; i++){
	aux[count[a[i].key()]++] = a[i];
}
//把临时数组覆盖原数组
for(int i=0; i<N; i++){
	a[i] = aux[i];
}

LSD 低位优先字符串排序，从右向左按位依次排序，循环调用上述算法，字母按ASC码排序，最大值R为256
public class LSD{
	public static void sort(String[] a,int w){
		int N = a.length;
		int R = 256;
		String[] aux = new String[N];
		for(int d=W-1; d>=0; d--){
			int[] count = new int[R+1]; //所有排序值的最大值
			//计算出现频率
			for(int i=0; i<N; i++){
				count[a[i].charAt(d) + 1]++;
			}
			//将频率转换为索引
			for(int r=0; r<R; r++){
				count[r+1] += count[r];
			}
			//将元素分类
			for(int i=0; i<N; i++){
				aux[count[a[i].charAt(d)]++] = a[i];
			}
			for(int i=0; i<N; i++){
				a[i] = aux[i];
			}
		}
	}
}

MSD高位优先字符串排序
public class MSD{
	private static int R = 256;
	private satic int M = 15;
	private static String[] aux;
	private static int charAt(String s, int d){
		if(d < s.length()) return s.charAt(d); else return -1;
	}
	public static void sort(String[] a){
		int N = a.length;
		aux = new String[N];
		sort(a, 0 , N-1, 0);
	}
	private static void sort(String[] a, int lo, int hi, int d){
		if(hi <= lo + M) {Insertion.sort(a, lo, hi, d); return;}
		int[] count = new int[R+2];
		for(int i=lo; i<=hi; i++){
			count[charAt(a[i], d) + 2]++;
		}
		for(int r=0; r< R+1; r++)
			count[r+1] += count[r];

		for(int i=lo; i<=hi; i++)
			aux[count[charAt(a[i], d)+1]++] = a[i];

		for(int i=lo; i<=hi; i++)
			a[i] = aux[i-lo];

		for(int r=0; r<R; r++){
			sort(a, lo+count[r], lo+count[r+1]-1, d+1);
		}	

	}
}

和快速排序一样，最好在排序之前将数组打乱或是将第一个元素和随机位置的元素交换以得到一个随机的切分元素。主要是为了预防数组已经有序或是接近有序的最坏情况
String类的compareTo()方法是从左到右访问字符串的字符的，也就说，在首字母不同时只会访问首字母

子字符串查找
1.暴力子字符串查找算法
public static int search(String pat, String txt){
	int m = pat.length();
	int n = txt.length();
	for(int i=0; i<= n-m; i++){
		int j;
		for(j=0; j<m; j++){
			if(txt.charAt(i+j) != pat.charAt(j))
				break;
			if(j == m) return i;	
		}
		return n;
	}
}

暴力查找法显示回退实现
public static int search(String pat, String txt){
	int m = pat.length();
	int n = txt.length();
	for(int i=0,int j=0; i<n&&j<m; i++){
		if(txt.charAt(i) == pat.charAt(j)) j++;
		else {i-=j; j=0;}
	}
	if(j == m) return i-m;
	else return n;
}

数据压缩
基因编码压缩 基因序列都是由ACTG四个字母组成，每个字母按ASC码占用8个bit，可以用00,01,10,11四个双bit码代替英文字母，这样就可以将基因序列占用空间降低至25%

游程编码
比特流中最简单的冗余形式就是一长串重复的比特，我们可以将连续重复的0或1代替成连续的总个数
