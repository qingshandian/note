编译原理

编译器过程
源程序->[词法分析器->语法分析器->语义分析器->中间代码生成器->代码优化器->代码生成器]->目标程序

每个阶段都可能遇到错误，各阶段检测到错误后，必须以恰当的方式进行错误处理，使得编译器能继续运行，以检测出源程序中的更多错误，发现错误即停止运行的编译器不是一个好的编译器

词法分析阶段能够检测输入中不能形成源语言任何记号的错误字符串
语法分析阶段可以确定记号流中违反源语言结构规则的错误
语义分析阶段试图检测出具有正确的语法结构但对操作无意义的部分



编译的最后一个阶段是目标代码生成，生成可重定位的机器代码或者汇编代码

某些编译器产生汇编代码，汇编代码需要交给汇编器做进一步的处理，也有些编译器能够完成汇编器的工作，产生可重定位的机器代码，交给装配器或者连接编辑器处理。

汇编代码是机器代码的容易记忆的形式，汇编代码使用名称而不是二进制代码来表示操作，存储地址也用名称来表示


编译的多个阶段可以分为前端和后端两个大的阶段
前端包括依赖于源语言并在很大程度上 独立于 目标机器的某些阶段或者某些阶段的某些部分。前端一般包括词法分析、语法分析、符号表的建立、语义分析、中间代码生成以及相关的错误处理。相当一部分代码优化工作也在前端完成

后端包括编译器中 依赖于 目标机器的阶段或某些阶段的某些部分。一般来说，后端完成的任务不依赖于源语言而只依赖于中间语言。后端主要包括代码优化、代码生成

为不同的机器编写相同源语言的编译器时，人们通常采用如下的方法：首先为所有的机器编写相同的编译器前端或者采用已有的编译器前端，然后为每个机器编写编译器的后端。如果编译器的后端是精心设计的，对于不同的机器不需要做很大的重新设计
