设计模式

一个类要么是面向继承设计的，要么就用final修饰

单例模式
工厂模式
build构造器模式
装饰器Decorator模式
模板方法模式
Adapter适配器模式（内部类 iterator）
proxy代理模式
Strategy策略模式（comparator,函数式编程）

OOP
封装：权限控制private,public
多态：重载，重写 （动态方法绑定），协变，接口
继承: 组合
抽象：类的组成（静态非静态变量方法，构造器）


java使用接口的好处
解耦
策略模式（comparable）
动态代理


volatile屏蔽指令重排序的语义在JDK1.5中才被完全修复，此前JDK中即使将变量声明为volatile也仍然不能完全避免重排序所导致的问题，主要是volatile变量前后的代码仍然存在重排序问题，这点也是在JDK1.5之前的Java中无法安全地使用DCL来实现单例


















