dubbo
应用架构演进过程
1.JEE
JEE把企业软件划分为展示层、业务逻辑层和数据存储层，各层的组件会被聚合到一起运行在通用的服务器上，如JBOSS，Tomcat，注意，Tomcat只实现了JEE web部分的规范
JEE的优点：分层设计明确了不同团队的分工，职责清晰、分工明确，衍生出了前端团队、后端团队和DBA团队；JEE的开发简单，所有的类都能直接本地引用及使用。由于企业级应用通常面向内部用户，使用者较少，也不需要考虑高并发等场景，加上JEE的稳定性，所以基本能满足日常的需求
缺点：大多数应用都在一个JVM中，随着应用的增大，性能会不断的下降，业务之间的耦合严重，即使企业内部有不同的约束和规范，但随着业务逻辑复杂度的增加，开发人员的不断流动，整个应用的维护会变得越来越难

2.MVC框架时期
由于EJB的各种问题严重影响了软件开发效率，为了降低成本提高生产力，开源框架开始成为企业的标配，这个时期比较主流的框架有SSH等，架构也从之前的分层架构变为了MVC架构。
这一时期的架构与JEE比较相似，但MVC的分层更加简单，框架也更加轻量级，但这一时期的应用最终还是会被打到一个war包里，并且部署在Tomcat等web服务器里，系统的耦合度一直没有太大的改善。
到了后期，有很多公司会对应用做垂直拆分，服务之间完全独立，无法进行远程调用，很多基础代码不能复用，需要复制使用。

3.分布式应用
早期SOA
由于互联网to C业务的不断兴起，传统单应用已经无法满足高并发的需求，经常出现性能瓶颈问题，为了解决以上问题，面向服务的架构SOA出现了。SOA将单一进程的应用做了拆分，形成独立对外提供服务的组件，每个组件通过网络协议对外提供服务。网络协议可以是TCP，也可以是HTTP。SOA有以下特点：
明确的协议，明确的接口，合作方式的改变，后端团队会根据不同的服务进一步拆分，有了更加细化的分工与合作方式。通信方式，初期的通信方式通常为XML，由于XML有大量的冗余信息，后来被JSON取代。
常见的SOA实现方式有两种：web Service和ESB。Web Service通常使用SOAP协议，即用HTTP或HTTPS来传输XML数据。所有的Web Service服务都会注册到web service的目录中，每个服务都依赖于这个目录来发现存在的服务。
ESB简称企业服务总线，服务之间的通信与调用都通过总线来完成，因此ESB没有注册中心，总线负责服务之间消息的解析、转换、路由，控制服务的可插拔，统一编排业务信息处理流程等等，这种实现特别适合老企业的内部，不同语言开发或不同源的应用系统，应用之间没有统一的交互协议，通过ESB总线可以屏蔽这些问题。
这两者的缺点都显而易见，web service的通信协议很笨重，ESB本身就是一个很重的东西，系统的变更可能又反过来影响总线的变更

微服务化
为了解决早期SOA中存在的各种问题，服务化架构得到了进一步的演进，逐渐形成了更加细粒度的微服务架构。在微服务架构中，一个应用会被拆分成一个个独立、可配置、可运行、可维护的子服务，极大地方便了服务的复用。微服务与SOA的不同：
服务粒度不同：微服务拆分得更加细小，从而可以方便地复用服务，编排出新的业务逻辑，SOA通常是比较粗粒度的划分。
协议的不同：微服务通常都是统一的协议，兼容老系统比较困难

云原生
企业应用在演进过程中又遇到了新的挑战
容量动态规划，微服务出现后，服务容量的评估，小服务资源的浪费等问题逐渐显现。为了实现资源的动态规划，容器化逐渐成为标配，容器编排技术也逐步走向成熟。
服务框架的臃肿，应用虽然已经微服务化，但应用中包含大量业务无关的资源库，即使开发一个小服务也要带上一个臃肿的框架，为了让应用变得更加轻量，下沉更多的通用能力，服务网格开始出现

Dubbo特性
1.面向接口代理的高性能RPC调用 提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节
2.服务自动注册与发现 支持多种注册中心服务，服务实例上下线实时感知
3.运行期流量调度 内置条件，脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能
4.智能负载均衡 内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量
5.高度可扩展能力 遵循微内核+插件的设计思想，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现
6.可视化的服务治理与运维 提供丰富服务治理，运维工具，随时查询服务元数据，服务健康状态及调用统计，实时下发路由策略，调整配置参数

随着服务规模和架构的不断演进，在大规模服务化之前，应用可能只是通过RMI或Hessian等工具简单地暴露和引用远程服务，通过配置服务的URL地址进行调用，通过F5等硬件进行负载均衡，使用dubbo可以解决一下问题：
高性能，透明的RPC调用：只要涉及服务之间的通信，RPC就必不可少。dubbo可以让开发者像调用本地的方法一样调用远程服务，而不需要显式在代码中指定是远程调用。整个过程对上层开发者透明，dubbo会自动完成后续的所有操作，例如：负载均衡、路由、协议转换、序列化等
服务的自动注册与发现：当服务越来越多时，服务URL配置管理变得非常困难，服务的注册和发现已经不可能由人工管理。此时需要一个服务注册中心，动态地注册和发现服务。dubbo适配了多种注册中心，服务消费方可以通过订阅注册中心，及时地知道其他服务提供者的信息，全程无须人工干预。
动态流量调度：在应用运行时，某些服务节点可能因为硬件原因需要减少负载，或者某些节点需要人工手动下线，又或者需要实现单元化的调用，灰度功能，dubbo提供了管理控制台，用户可以在界面上动态地调整每个服务的权重，路由规则，禁用启用，实现运行时的流量调度
依赖分析与调用统计：当服务间的依赖关系变得错综复杂，不能完整地描述出应用间的架构关系，dubbo可以接入三方APM做分布式链路追踪与性能分析，或者使用已有的独立监控中心来监控接口的调用次数及耗时，用户可以根据这些数据反推出系统容量

Dubbo核心组件
config 配置层。ServiceConfig和ReferenceConfig,初始化配置信息，可以理解为该层管理了整个dubbo的配置

proxy 服务代理层。在dubbo中，无论是生产者还是消费者，框架都会生成一个代理类，整个过程对上层是透明的。当调用一个远程接口时，看起来就像是调用了一个本地的接口一样，代理层会自动做远程调用并返回结果，即让业务层对远程调用完全无感

registry 注册层。负责dubbo框架的服务注册与发现，当有新的服务加入或旧服务下线时，注册中心都会感知并通知给所有订阅方，整个过程不需要人工参与

cluster 集群容错层。该层主要负责：调用远程失败时的容错机制，如失败重试、快速失败，选择具体调用节点时的负载均衡策略，特殊调用路径的路由策略

monitor 远程调用层。封装RPC调用具体过程，Protocol时Invoker暴露（发布一个服务让别人可以调用）和引用（引用一个远程服务到本地）的主功能入口，它负责管理Invoker的整个生命周期。Invoker是Dubbo的核心模型，框架中所有其他模型都向它靠拢，或者转换成它，它代表一个可执行体。允许向它发起invoke调用，它可能是执行一个本地的接口实现，也可能是一个远程的实现，还可能是一个集群的实现

exchange 信息交换层。建立request-response模型，封装请求响应模式，如把同步请求转化为异步请求

transport 网络传输层。把网络传输抽象为统一的接口，如mina和netty虽然接口不一样，但是dubbo在它们上面又封装了统一的接口

serialize 序列化层

服务的暴露过程
首先，服务器端在框架启动时，会初始化服务实例，通过proxy组件调用具体协议，把服务端要暴露的接口封装成Invoker，然后转成Exporter，这个时候框架会打开服务端口并记录服务实例到内存中，最后通过registry把服务元数据注册到注册中心

Proxy组件：为远程接口生成代理类，可以让我们像调用本地方法一样调用远程方法

Protocol：协议就是对数据格式的一种约定，它可以把我们对接口的配置根据不同的协议转换成不同的Invoker对象。例如：用DubboProtocol可以把XML文件中的一个远程接口的配置转换成一个DubboInvoker

Exporter：用于暴露到注册中心的对象 Registry：把Exporter注册到注册中心

以上就是整个服务暴露的过程，消费方在启动时会通过Registry在注册中心订阅服务端的元数据（包括IP和端口），这样就可以得到刚才暴露的服务了

消费端调用过程
首先，调用过程也是从一个Proxy开始的，Proxy持有了一个Invoker对象，然后触发invoke调用。在invoke调用过程中，需要使用Cluster，Cluster负责容错，如调用失败的重试，Cluster在调用之前会通过Directory获取所有可以调用的远程服务Invoker列表，一个接口可能有多个节点提供服务，由于可以调用的远程服务有很多，此时如果用户配置了路由规则，如指定某些方法只能调用某个节点，那么还会根据路由规则将Invoker列表过滤一遍。
然后，存活下来的Invoker可能还会有很多，此时要调用哪一个？于是会继续通过LoadBalance方法做负载均衡，最终选出一个可以调用的Invoker。这个Invoker在调用之前又会经过一个过滤器链，这个过滤器链通常是处理上下文、限流、计数等。
接着，会使用Client做数据传输，如Netty Client等，传输数据之前肯定要做一些私有协议的构造，此时就会用到Codec接口。构造完成后，就对数据包做序列化，然后传输到服务提供者端。服务提供者收到数据包，也会使用Codec处理协议头及一些半包、粘包等。处理完后再对完整的数据报文做反序列化处理。
随后，这个Request会被分配到线程池中进行处理。Server根据请求查找对应的Exporter。Invoker是被用装饰器模式一层一层套了非常多Filter的，因此在调用最终的实现类之前，又会经过一个服务者端的过滤器链。
最终，我们得到了具体接口的真实实现并调用，再原路把结果返回

开发过程：
服务端
1.编写服务接口 2.编写服务接口实现类 3.添加spring配置文件
<!-- 服务提供方应用名称，方便用于依赖跟踪 -->
<dubbo:application name="echo-provider" />
<!-- 使用本地ZK作为注册中心 -->
<dubbo:registry address="zookeeper://127.0.0.1:2181" />
<!-- 只用Dubbo协议并且指定监听20880端口 -->
<dubbo:protocol name="dubbo" port="20880" />
<!-- 通过XML方式把实现配置为bean，让Spring托管和实例化 -->
<bean id="echoService" class="com.alibaba.dubbo.samples.echo.impl.EchoServiceImpl" />
<!-- 声明要暴露的接口 -->
<dubbo:service interface="com.alibaba.dubbo.samples.echo.api.EchoService" ref="echoService" />
4.启动Spring ApplicationContext容器

这个时候就可以直接在Telnet命令行中直接模拟客户端调用
Telnet localhost 20880
invoke com.alibaba.dubbo.samples.echo.api.EchoService.echo("hello world")
"hello world"

一般生产环境中用shell脚本启动dubbo，对应的启动类是com.alibaba.dubbo.container.Main 它的原理是利用扩展点加载Spring容器，然后激活Spring框架加载配置

编写客户端代码
在客户端只依赖服务暴露的接口的情况下，使用DUbbo框架能够让我们把关注点放在编写服务消费逻辑上，而不必去关心网络连接和序列化等底层技术，但我们还是要提供一些框架依赖的配置
<dubbo:application name="echo-consumer" />
<!-- 使用本地ZK作为注册中心 -->
<dubbo:registry address="zookeeper://127.0.0.1:2181" />
<!-- 指定要消费的服务 -->
<dubbo:reference id="echoService" check="false" interface="com.alibaba.dubbo.samples.echo.api.EchoService" />
启动Spring容器，调用远程方法
EchoService echoService = (EchoService)context.getBean("echoService");
String status = echoService.echo("Hello World");

注册中心概述
在Dubbo微服务体系中，注册中心是其核心组件之一，Dubbo通过注册中心实现了分布式环境中各服务之间的注册与发现，是各个分布式节点之间的纽带，其主要作用如下：
1.动态加入 一个服务提供者通过注册中心可以动态地把自己暴露给其他消费者，无须消费者逐个去更新配置文件
2.动态发现 一个消费者可以动态地感知新的配置、路由规则和新的服务提供者，无须重启服务使之生效
3.动态调整 注册中心支持参数的动态调整，新参数自动更新到所有相关服务几点
4.统一配置 避免了本地配置导致每个服务的配置不一致问题

Dubbo的注册中心源码在模块dubbo-registry中，里面包含五个子模块
dubbo-registry-api 包含了注册中心的所有API和抽象实现类
dubbo-registry-zookeeper 使用ZK作为注册中心的实现
dubbo-registry-redis 使用Redis作为注册中心的实现
dubbo-registry-default Dubbo基于内存的默认实现
dubbo-registry-multicast multicast模式的服务注册与发现
其中ZK是官方推荐的注册中心，在生产环境中有过实际使用，Redis注册中心并没有经过长时间运行的可靠性验证，如果以上注册中心都不能满足需求，那么用户可以基于RegistryFactory和Registry自行扩展

注册中心的整体流程：
服务提供者启动时，会向注册中心写入自己的元数据信息，同时会订阅配置元数据信息
消费者启动时，也会向注册中心写入自己的元数据信息，并订阅服务提供者、路由和配置元数据信息
服务治理中心启动时，会同时订阅所有的消费者、服务提供者、路由和配置元数据信息
当有服务提供者离开或有新的服务提供者加入时，注册中心服务提供者目录会发生变化，变化信息会动态通知给消费者、服务治理中心
当消费方发起调用时，会异步将调用、统计信息等上报给监控中心

注册中心的总体流程相同，但是不同的注册中心有不同的实现方式，其数据结构也不相同

ZK是树形结构的注册中心，每个节点的类型分为持久节点、持久顺序节点、临时节点和临时顺序节点
持久节点：服务注册后保证节点不会丢失，注册中心重启也会存在
临时节点：服务注册后连接丢失或session超时，注册的节点会自动那个被移除
Dubbo使用ZK作为注册中心时，只会创建持久节点和临时节点两种，对创建的顺序并没有要求
节点整体结构分为四层：root（根节点，对应示例中的dubbo）、service(接口名称)、四种服务目录。在服务分类节点下是具体的Dubbo服务URL

+ /dubbo
+-- service
	+--providers  包含多个服务者URL元数据
	+--consumers  包含多个消费者URL元数据
	+--routers	  包含多个消费者路由策略URL元数据
	+--configurators 包含多个服务者动态配置URL元数据

		    /dubbo
	com.alibaba.demo.Service
	       providers
	    192.168.0.1:20880		
在dubbo框架启动时，会根据用户配置的服务，在注册中心创建4个目录，在providers和consumers目录中分别存储服务提供方、消费方元数据信息，主要包括IP、端口、权重和应用名等。
在Dubbo框架进行服务调用时，用户可以通过服务治理平台下发路由配置，如果要在运行时改变服务参数，则用户可以通过服务治理平台下发动态配置，服务器端会通过订阅机制收到属性变更，并重新更新已经暴露的服务。
服务元数据中的所有参数都是以键值对形式存储的

zk集群配置
<dubbo:registry protocol="zookeeper" address="ip:port,ip:port" />

订阅/发布是整个注册中心的核心功能之一。在传统应用系统中，我们通常会把配置信息写入一个配置文件，当配置需要变更时会修改配置文件，再通过手动触发内存中的配置重新加载，如重启服务等，在集群规模较小的场景下，这种方式也能方便地进行运维。当服务节点数量不断上升的时候，这种管理方式的弊端就会凸显出来
如果我们使用了注册中心，那么上述的问题就会迎刃而解。当一个已有服务提供者节点下线，或者一个新的服务提供者加入微服务环境时，订阅对应接口的消费者和服务治理中心都能及时收到注册中心的通知，并更新本地的配置信息。如此一来，后续的服务调用就能避免调用已经下线的节点，或者能调用到新的节点。整个过程都是自动完成的，不需要人工参与。

ZK发布的实现
服务提供者和消费者都需要把自己注册到注册中心，服务提供者的注册是为了让消费者感知服务的存在，从未发起远程调用，也让服务治理中心感知有新的服务提供者上线。消费者的发布是为了让服务治理中心可以发现自己。zk发布代码非常简单，只是调用了zk的客户端库在注册中心上创建一个目录。取消发布也很简单，只是把zk注册中心上对应的路径删除

订阅的实现
订阅通常有pull和push两种方式，一种是客户端定时轮询注册中心拉去配置，另一种是注册中心主动推送数据给客户端。这两种方式各有利弊，目前dubbo采用的是第一次启动拉取方式，后续接受事件重新拉取数据
在服务暴露时，服务端会订阅configurators用于监听动态配置，在消费端启动时，消费端会订阅providers、routers和configurators这三个目录，分别对应服务提供者、路由和动态配置变更通知
zk注册中心采用的是“事件通知”+“客户端拉取”的方式，客户端在第一次连接上注册中心时，会获取对应目录下全量的数据，并在订阅的节点上注册一个watcher，客户端与注册中心之间保持TCP长连接，后续每个节点有任何数据变化的时候，注册中心会根据watcher的回调主动通知客户端（事件通知），客户端接收到通知后，会把对应节点下的全量数据都拉取过来（客户端拉取），全量拉取有一个局限，当微服务节点较多时会对网络造成很大的压力
zk的每个节点都有一个版本号，当某个节点的数据发生变化时，该节点对应的版本号就会发生变化（即事务操作），并触发watcher事件，推送数据给订阅方。版本号强调的变更次数，即使该节点的值没有变化，只要有更新操作，依然会使版本号变化

什么是事务操作？
客户端任何新增删除修改会话创建和失效操作，都会被认为是事务操作，会有zk集群中的leader执行。即使客户端连接的是非leader节点，请求也会被转发给leader执行，一次来保证所有事务操作的全局时序性。

服务治理中心会处理所有service层的订阅，普通消费者的订阅逻辑是首先根据URL的类别得到一组需要订阅的路径，如果类别是*，则会订阅四种类型的路径，否则只订阅providers路径


使用Redis作为注册中心，其订阅发布实现方式与zk不同，redis订阅发布使用的是过期机制和publish/subscribe通道，服务的key写入redis后，发布者需要周期性地刷新key的过期时间。如果服务提供者宕机，没有续期，则key会因为超时而被redis删除

注册中心缓存机制
缓存的存在就是用空间换取时间，如果每次远程调用都要先从注册中心获取一次可调用的服务列表，则会让注册中心承受巨大的流量压力。另外，每次额外的网络请求也会让整个系统的性能下降。因此dubbo的注册中心实现了通用的缓存机制。消费者或服务治理中心获取注册信息后会做本地缓存。内存中会有一份，保存在Properties对象里，磁盘上也会持久化一份文件，通过file对象引用

Properties保存了所有服务提供者的URL，使用URL作为key，提供者列表、路由规则列表、配置规则列表等作为value，包括所有的注册中心的地址。如果应用的启动过程中注册中心无法连接，则Dubbo框架会自动通过本地缓存加载Invoker
缓存的保存有同步和异步两种方式

Dubbo SPI没有直接使用Java SPI，而是在它的思想上又做了一定的改进，同时，Dubbo SPI又兼容Java SPI

SPI的全称是Service Provider Interface，起初是提供给厂商做插件开发的，Java SPI使用了策略模式，一个接口多种实现。我们只声明接口，具体的实现并不在程序中直接确定，而是由程序之外的配置掌控，用于具体实现的装配。具体步骤如下：
1.定义一个接口以及对应的方法
2.编写该接口的一个实现类
3.在META-INF/services/目录下，创建一个以接口全路径命名的文件，如com.test.spi.PrintService
4.文件内容为具体实现类的全路径名，如果有多个，则用分行符分隔
5.在代码中通过java.util.ServiceLoader来加载具体的实现类
ServiceLoader<PrintService> loader = ServiceLoader.load(PrintService.class)
for(PrintService printService: loader){
	printService.printInfo();
}
JDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现则初始化很耗时，如果没有用上也加载，则浪费资源

Dubbo的SPI实现代码：
PrintService printService = ExtensionLoader.getExtensionLoader(PrintService.class).getDefaultExtension();
printService.printInfo();
Dubbo SPI和Java SPI类似，需要在META-INF/dubbo/下放置对应的SPI配置文件，文件名称需要命名为接口的全路径名。配置文件的内容为key=扩展点实现类全路径名，如果有多个实现类则使用换行符分隔。其中key会作为Dubbo SPI注解中的传入参数。另外，Dubbo SPI还兼容了Java SPI的配置路径和内容配置方式。在Dubbo启动的时候，会默认扫这三个目录下的配置文件：META-INF/services/、META-INF/dubbo/、META-INF/dubb0/internal/

使用@SPI注解标识一个接口是Dubbo SPI接口，即是一个扩展点，可以有多个不同的内置或用户定义的实现
Dubbo中很多地方通过getExtension(Class<T> type, String name)来获取扩展点接口的具体实现，此时会对传入的Class做校验，判断是否是接口，以及是否有@SPI注解，两者缺一不可

Dubbo SPI的自适应特性让整个框架非常灵活，而动态编译又是自适应特性的基础，因为动态生成的自适应只是字符串，需要通过编译才能得到真正的Class。虽然我们可以使用反射来动态代理一个类，但是在性能上和直接编译好的Class会有一定的差距。
Java中动态生成Class的方式有很多，可以直接基于字节码的方式生成，常见的工具库有CGLIB、ASM、Javassist等。而自适应扩展点使用了生成字符串代码再编译为Class的方式

ASM是一个Java字节码操控框架。它能够以二进制形式修改已有类或者动态生成类，ASM可以直接生成二进制class文件，也可以在类被加载入Java虚拟机之前动态改变类行为。ASM从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类，不过ASM在创建Class字节码的过程中，操纵的是底层JVM的汇编指令级别，这要求ASM使用者要对Class组织结构和JVM汇编指令有一定的了解

Javassit的使用简单快速，直接使用java编码的形式，而不需要了解虚拟机指令，就能够动态改变类的结构或者动态生成类
例如：
ClassPool cp = ClassPool.getDefault();
CtClass ctClass = classPool.makeClass("HelloWorld");
CtMethod ctMethod = CtNewMethod.make("public static void test(){System.out.println(\"Hello World\")}",ctClass);
ctClass.addMethod(ctMethod);
Class aClass = ctClass.toClass();

Dubbo框架直接集成了Spring的能力，利用了Spring配置文件扩展出自定义的解析方式。dubbo.xsd文件用来约束使用XML配置时的标签和对应的属性。Spring在解析到自定义的namespace标签时，会触发Dubbo的DubboNameSpaceHandler类来进行初始化和解析。其中spring.schema文件指明约束文件的具体路径，spring.handlers文件指明DubboNameSpaceHandler类来解析标签

配置承载初始化
不管在服务暴露还是服务消费场景下，Dubbo框架都会根据优先级对配置信息做聚合处理，目前默认覆盖策略主要遵循以下几点规则：
1. -D传递给JVM参数优先级最高，比如-Ddubbo.protocol.port=20880
2.代码或XML配置优先级次高，比如Spring中XML文件指定<dubbo:protocol port="20880" />
3.配置文件优先级最低，比如dubbo.properties文件指定dubbo.protocol.port=20880
一般推荐使用配置文件作为默认值，只有XML没有配置时，配置文件才会生效
Dubbo的配置也会受到provider的影响，这个属于运行期属性值影响，遵循以下规则：
1.如果只有provider端指定配置，则会自动透传到客户端
2.如果客户端也配置了相应属性，则服务端配置会被覆盖

整体上看，Dubbo框架做服务暴露分为两个部分，第一步将持有的服务实例通过代理转换成Invoker，第二步会把Invoker通过具体的协议转换成Exporter

Dubbo支持多注册中心同时写，如果配置了服务同时注册多个注册中心，则会在ServiceConfig#doExportUrls中依次暴露，Dubbo也支持相同的服务暴露多个协议，比如同时暴露Dubbo和REST协议，框架内部会依次对使用的协议都做一次服务暴露。服务暴露需要打开端口，不同的协议使用的端口也不一样。如果没有注册中心，暴露的url信息是以具体RPC协议开头的，并不是以注册中心协议开头的
注册中心在做服务暴露时依次做了以下几件事情：
1.委托具体协议进行服务暴露，创建NettyServer监听端口和保存服务实例
2.创建注册中心对象，与注册中心创建TCP连接
3.注册服务元数据到注册中心
4.订阅configurators节点，监听服务动态属性变更事件
5.服务销毁收尾工作，比如关闭端口、反注册服务信息等

Dubbo框架做服务消费也分为两大部分，第一步通过持有远程服务实例生成Invoker，这个Invoker在客户端是核心的远程代理对象，第二步会把Invoker通过动态代理转换成实现用户接口的动态代理引用。这里的Invoker承载了网络连接，服务调用和重试等功能，在客户端，它可能是一个远程的实现，也可能是一个集群实现。
Dubbo支持多注册中心同时消费，如果配置了服务同时注册多个注册中心，则会在ReferenceConfig#createProxy中合并成一个Invoker
Dubbo可以绕过注册中心直接向指定服务，直接指定目标ip和端口发起RPC调用，使用直连模式可以方便在某些场景下使用，比如压测指定机器等

优雅停机
优雅停机特性是所有RPC框架中非常重要的特性之一，因为核心业务在服务器中正在执行时突然中断可能会出现严重后果
Dubbo中实现的优雅停机机制主要包含6个步骤：
1.收到kill 9进程退出信号，Spring容器会触发容器销毁事件
2.provider端会取消注册服务元数据信息
3.consumer端会收到最新地址列表
4.Dubbo协议会发送readonly事件报文通知consumer服务不可用
5.服务端等待已经执行的任务结束并拒绝新任务执行

如果我们动手写简单的RPC调用，则需要把服务调用信息传递到服务端，每次服务调用的一些公用的信息包括服务调用接口、方法名、方法参数类型和方法参数值等，在传递方法参数值时需要先序列化对象并经过网络传输到服务端，在服务端需要按照客户端序列化顺序再做一次反序列化来读取信息，然后拼装成请求对象进行服务反射调用，最终将调用结果再传给客户端

首先在客户端启动时会从注册中心拉取和订阅对应的服务列表，Cluster会把拉取的服务列表聚合成一个Invoker。每次RPC调用前会通过Directory#list获取providers地址，获取这些服务列表给后续路由和负载均衡使用。
在Dubbo发起服务调用时，所有路由和负载均衡都是在客户端实现的。客户端服务调用首先先会触发路由操作，然后将路由结果得到的服务列表作为负载均衡参数，经过负载均衡后会选出一台机器进行RPC调用。客户端经过路由和负载均衡后，会将请求交给底层I/O线程池处理，I/O线程池主要处理读写、序列化和反序列化等逻辑，因此这里一定不能阻塞操作。
目前Dubbo将服务调用和Telnet调用做了端口复用，在编解码层面也做了适配。在Telnet调用时，会新建一个TCP连接，传递接口、方法和JSON格式的参数进行服务调用，在编解码层面简单读取流中的字符串，最终交给Telnet对应的Handler去解析方法调用。如果是非Telnet调用，则服务提供方会根据传递过来的接口，分组和版本信息查找Invoker对应的实例进行反射调用。Telnet和正常RPC调用不一样的地方是序列化和反序列化使用的不是Hessian方式，而是直接使用fastjson进行处理。

在消息体中，客户端严格按照序列化顺序写入消息，服务端也会遵循相同的顺序读取消息，客户端发起请求的消息体依次保存下列内容：Dubbo版本号，服务接口名，服务接口版本，方法名，参数类型，方法参数值和请求额外参数
在返回消息体中，会先把返回值状态标记写入输出流，根据标记状态判断RPC是否正常，比如一次正常RPC调用成功，则先往消息体中写一个标记1，紧接着再写方法返回值

Dubbo默认客户端和服务端都会发送心跳报文，用来保持TCP长连接状态，在客户端和服务端，Dubbo内部开启一个线程循环扫描并检测连接是否超时，在服务端如果发现超时则会主动关闭客户端连接，在客户端发现超时则会主动重新创建连接，默认心跳检测时间是60秒。

Dubbo容错机制能增强整个应用的鲁棒性，容错过程对上层用户是完全透明的，但用户也可以通过不同的配置项来选择不同的容错机制。
Failover: 默认策略，当出现失败时，会重试其他服务器，用户可以设置重试次数，会对请求做负载均衡，通常使用在读操作或幂等的写操作上，但重试会导致接口的延迟增大，重试容易加重下游服务的负载
Failfast: 快速失败，不做任何重试
Failsafe:当出现异常时，直接忽略异常，通常用在不关心调用是否成功的场景
Failback：请求失败后，会自动记录在失败队列里，并由一个定时线程池定时重试

整个容错过程中首先会使用Directory#list来获取所有的Invoker列表。Directory也有很多种实现子类，既可以提供静态的Invoker列表，也可以提供静态的Invoker列表。静态列表是用户自己设置的列表，动态列表根据注册中心的数据动态变化，动态更新Invoker列表的数据，整个过程对上层透明

通过Directory获取所有Invoker列表的时候，就会调用到路由接口，路由接口会根据用户配置的不同路由策略对Invoker列表进行过滤，只返回符合规则的Invoker。

路由分为条件路由、文件路由和脚本路由，对应dubbo-admin中三种不同的规则配置方式
例如路由规则：method = find* => host = 192.168.1.22
表示所有调用find开头的方法都会被路由到IP为192.168.1.22的服务节点上

路由规则过滤之后幸存下来的Invoker还需要经过负载均衡这一关，选中最终要调用的Invoker
负载均衡有一些额外特性
1.粘滞连接 
粘滞连接用于有状态服务，尽可能让客户端总是向同一提供者发起调用，除非该提供者挂了，再连接另一台
2.可用检测
默认会开启检查，对所有的服务都做是否可用的检查，如果不可用，则再次做负载均衡
3.避免重复调用
对于已经调用过的远程服务，避免重复选择

随机负载：默认的负载策略，按权重设置随机概率
轮询：按公约后的权重设置轮询比例，存在慢的提供者累积请求的问题
最少活跃调用数:框架会记下每个Invoker的活跃数，每次只从活跃数最少的Invoker里选一个节点
一致性Hash：相同参数的请求总是发到同一提供者。当某一台提供者挂掉时，原本发往该提供者的请求，基于虚拟节点，会平摊到其他提供者，不会引起剧烈变动，默认只对第一个参数hash。普通一致性Hash也有一定的局限性，它的散列不一定均匀，容易造成某些节点压力大。因此Dubbo框架使用了优化过的一致性Hash，这种算法会为每个真实节点再创建多个虚拟节点，让节点在环形上的分布更加均匀

当接口配置了Mock，在RPC调用抛出异常RpcException时就会执行mock方法
<dubbo:reference interface="com.foo.BarService" mock="com.foo.BarServiceMock" />
服务的降级是在dubbo-admin中通过override协议更新Invoker的Mock参数实现的，参数mock=force:return+null表示是强制Mock，远程调用直接返回null，不再发起远程调用

泛化调用：主要用于消费端没有API接口的情况，不需要引入接口jar包，而是直接通过GenericService接口来发起服务调用。框架会自动把POJO对象转为Map，只要参数名能对应上即可

Dubbo中提供的服务分组和版本是强隔离的，如果服务指定了服务分组和版本，则消费方调用时也必须传递相同的分组名称和版本名称















































